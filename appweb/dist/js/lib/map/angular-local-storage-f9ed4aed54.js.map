{"version":3,"sources":["angular-local-storage-f9ed4aed54.js"],"names":["window","angular","isDefined","isUndefined","isNumber","isObject","isArray","extend","toJson","module","provider","this","prefix","storageType","cookie","expiry","path","notify","setItem","removeItem","setPrefix","setStorageType","setStorageCookie","exp","setStorageCookieDomain","domain","setNotify","itemSet","itemRemove","$get","$rootScope","$window","$document","$parse","webStorage","self","document","substr","deriveQualifiedKey","key","browserSupportsLocalStorage","supported","Math","round","random","e","$broadcast","message","addToLocalStorage","value","newvalue","addToCookies","getFromLocalStorage","getFromCookies","item","getItem","JSON","parse","removeFromLocalStorage","i","arguments","length","removeFromCookies","getKeysForLocalStorage","prefixLength","keys","push","Description","clearAllFromLocalStorage","regularExpression","prefixRegex","RegExp","testRegex","clearAllFromCookies","test","browserSupportsCookies","navigator","cookieEnabled","indexOf","call","daysToExpiry","expiryDate","Date","cookieDomain","setTime","getTime","toGMTString","cookiePath","encodeURIComponent","cookies","split","thisCookie","charAt","substring","storedValues","decodeURIComponent","getStorageType","bindToScope","scope","def","lsKey","assign","$watch","newVal","lengthOfLocalStorage","count","storage","isSupported","set","add","get","remove","clearAll","bind","deriveKey"],"mappings":"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","file":"../angular-local-storage-f9ed4aed54.js","sourcesContent":["/**\r\n * An Angular module that gives you access to the browsers local storage\r\n * @version v0.2.6 - 2016-03-16\r\n * @link https://github.com/grevory/angular-local-storage\r\n * @author grevory <greg@gregpike.ca>\r\n * @license MIT License, http://www.opensource.org/licenses/MIT\r\n */\r\n(function (window, angular) {\r\nvar isDefined = angular.isDefined,\r\n  isUndefined = angular.isUndefined,\r\n  isNumber = angular.isNumber,\r\n  isObject = angular.isObject,\r\n  isArray = angular.isArray,\r\n  extend = angular.extend,\r\n  toJson = angular.toJson;\r\n\r\nangular\r\n  .module('LocalStorageModule', [])\r\n  .provider('localStorageService', function() {\r\n    // You should set a prefix to avoid overwriting any local storage variables from the rest of your app\r\n    // e.g. localStorageServiceProvider.setPrefix('yourAppName');\r\n    // With provider you can use config as this:\r\n    // myApp.config(function (localStorageServiceProvider) {\r\n    //    localStorageServiceProvider.prefix = 'yourAppName';\r\n    // });\r\n    this.prefix = 'ls';\r\n\r\n    // You could change web storage type localstorage or sessionStorage\r\n    this.storageType = 'localStorage';\r\n\r\n    // Cookie options (usually in case of fallback)\r\n    // expiry = Number of days before cookies expire // 0 = Does not expire\r\n    // path = The web path the cookie represents\r\n    this.cookie = {\r\n      expiry: 30,\r\n      path: '/'\r\n    };\r\n\r\n    // Send signals for each of the following actions?\r\n    this.notify = {\r\n      setItem: true,\r\n      removeItem: false\r\n    };\r\n\r\n    // Setter for the prefix\r\n    this.setPrefix = function(prefix) {\r\n      this.prefix = prefix;\r\n      return this;\r\n    };\r\n\r\n    // Setter for the storageType\r\n    this.setStorageType = function(storageType) {\r\n      this.storageType = storageType;\r\n      return this;\r\n    };\r\n\r\n    // Setter for cookie config\r\n    this.setStorageCookie = function(exp, path) {\r\n      this.cookie.expiry = exp;\r\n      this.cookie.path = path;\r\n      return this;\r\n    };\r\n\r\n    // Setter for cookie domain\r\n    this.setStorageCookieDomain = function(domain) {\r\n      this.cookie.domain = domain;\r\n      return this;\r\n    };\r\n\r\n    // Setter for notification config\r\n    // itemSet & itemRemove should be booleans\r\n    this.setNotify = function(itemSet, itemRemove) {\r\n      this.notify = {\r\n        setItem: itemSet,\r\n        removeItem: itemRemove\r\n      };\r\n      return this;\r\n    };\r\n\r\n    this.$get = ['$rootScope', '$window', '$document', '$parse', function($rootScope, $window, $document, $parse) {\r\n      var self = this;\r\n      var prefix = self.prefix;\r\n      var cookie = self.cookie;\r\n      var notify = self.notify;\r\n      var storageType = self.storageType;\r\n      var webStorage;\r\n\r\n      // When Angular's $document is not available\r\n      if (!$document) {\r\n        $document = document;\r\n      } else if ($document[0]) {\r\n        $document = $document[0];\r\n      }\r\n\r\n      // If there is a prefix set in the config lets use that with an appended period for readability\r\n      if (prefix.substr(-1) !== '.') {\r\n        prefix = !!prefix ? prefix + '.' : '';\r\n      }\r\n      var deriveQualifiedKey = function(key) {\r\n        return prefix + key;\r\n      };\r\n      // Checks the browser to see if local storage is supported\r\n      var browserSupportsLocalStorage = (function () {\r\n        try {\r\n          var supported = (storageType in $window && $window[storageType] !== null);\r\n\r\n          // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\r\n          // is available, but trying to call .setItem throws an exception.\r\n          //\r\n          // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage\r\n          // that exceeded the quota.\"\r\n          var key = deriveQualifiedKey('__' + Math.round(Math.random() * 1e7));\r\n          if (supported) {\r\n            webStorage = $window[storageType];\r\n            webStorage.setItem(key, '');\r\n            webStorage.removeItem(key);\r\n          }\r\n\r\n          return supported;\r\n        } catch (e) {\r\n          storageType = 'cookie';\r\n          $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\r\n          return false;\r\n        }\r\n      }());\r\n\r\n      // Directly adds a value to local storage\r\n      // If local storage is not available in the browser use cookies\r\n      // Example use: localStorageService.add('library','angular');\r\n      var addToLocalStorage = function (key, value) {\r\n        // Let's convert undefined values to null to get the value consistent\r\n        if (isUndefined(value)) {\r\n          value = null;\r\n        } else {\r\n          value = toJson(value);\r\n        }\r\n\r\n        // If this browser does not support local storage use cookies\r\n        if (!browserSupportsLocalStorage || self.storageType === 'cookie') {\r\n          if (!browserSupportsLocalStorage) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\r\n          }\r\n\r\n          if (notify.setItem) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: 'cookie'});\r\n          }\r\n          return addToCookies(key, value);\r\n        }\r\n\r\n        try {\r\n          if (webStorage) {\r\n            webStorage.setItem(deriveQualifiedKey(key), value);\r\n          }\r\n          if (notify.setItem) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: self.storageType});\r\n          }\r\n        } catch (e) {\r\n          $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\r\n          return addToCookies(key, value);\r\n        }\r\n        return true;\r\n      };\r\n\r\n      // Directly get a value from local storage\r\n      // Example use: localStorageService.get('library'); // returns 'angular'\r\n      var getFromLocalStorage = function (key) {\r\n\r\n        if (!browserSupportsLocalStorage || self.storageType === 'cookie') {\r\n          if (!browserSupportsLocalStorage) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\r\n          }\r\n\r\n          return getFromCookies(key);\r\n        }\r\n\r\n        var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;\r\n        // angular.toJson will convert null to 'null', so a proper conversion is needed\r\n        // FIXME not a perfect solution, since a valid 'null' string can't be stored\r\n        if (!item || item === 'null') {\r\n          return null;\r\n        }\r\n\r\n        try {\r\n          return JSON.parse(item);\r\n        } catch (e) {\r\n          return item;\r\n        }\r\n      };\r\n\r\n      // Remove an item from local storage\r\n      // Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'\r\n      var removeFromLocalStorage = function () {\r\n        var i, key;\r\n        for (i=0; i<arguments.length; i++) {\r\n          key = arguments[i];\r\n          if (!browserSupportsLocalStorage || self.storageType === 'cookie') {\r\n            if (!browserSupportsLocalStorage) {\r\n              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\r\n            }\r\n\r\n            if (notify.removeItem) {\r\n              $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {key: key, storageType: 'cookie'});\r\n            }\r\n            removeFromCookies(key);\r\n          }\r\n          else {\r\n            try {\r\n              webStorage.removeItem(deriveQualifiedKey(key));\r\n              if (notify.removeItem) {\r\n                $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {\r\n                  key: key,\r\n                  storageType: self.storageType\r\n                });\r\n              }\r\n            } catch (e) {\r\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\r\n              removeFromCookies(key);\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      // Return array of keys for local storage\r\n      // Example use: var keys = localStorageService.keys()\r\n      var getKeysForLocalStorage = function () {\r\n\r\n        if (!browserSupportsLocalStorage) {\r\n          $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\r\n          return [];\r\n        }\r\n\r\n        var prefixLength = prefix.length;\r\n        var keys = [];\r\n        for (var key in webStorage) {\r\n          // Only return keys that are for this app\r\n          if (key.substr(0, prefixLength) === prefix) {\r\n            try {\r\n              keys.push(key.substr(prefixLength));\r\n            } catch (e) {\r\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.Description);\r\n              return [];\r\n            }\r\n          }\r\n        }\r\n        return keys;\r\n      };\r\n\r\n      // Remove all data for this app from local storage\r\n      // Also optionally takes a regular expression string and removes the matching key-value pairs\r\n      // Example use: localStorageService.clearAll();\r\n      // Should be used mostly for development purposes\r\n      var clearAllFromLocalStorage = function (regularExpression) {\r\n\r\n        // Setting both regular expressions independently\r\n        // Empty strings result in catchall RegExp\r\n        var prefixRegex = !!prefix ? new RegExp('^' + prefix) : new RegExp();\r\n        var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp();\r\n\r\n        if (!browserSupportsLocalStorage || self.storageType === 'cookie') {\r\n          if (!browserSupportsLocalStorage) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\r\n          }\r\n          return clearAllFromCookies();\r\n        }\r\n\r\n        var prefixLength = prefix.length;\r\n\r\n        for (var key in webStorage) {\r\n          // Only remove items that are for this app and match the regular expression\r\n          if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {\r\n            try {\r\n              removeFromLocalStorage(key.substr(prefixLength));\r\n            } catch (e) {\r\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\r\n              return clearAllFromCookies();\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n\r\n      // Checks the browser to see if cookies are supported\r\n      var browserSupportsCookies = (function() {\r\n        try {\r\n          return $window.navigator.cookieEnabled ||\r\n          (\"cookie\" in $document && ($document.cookie.length > 0 ||\r\n            ($document.cookie = \"test\").indexOf.call($document.cookie, \"test\") > -1));\r\n          } catch (e) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\r\n            return false;\r\n          }\r\n        }());\r\n\r\n        // Directly adds a value to cookies\r\n        // Typically used as a fallback is local storage is not available in the browser\r\n        // Example use: localStorageService.cookie.add('library','angular');\r\n        var addToCookies = function (key, value, daysToExpiry) {\r\n\r\n          if (isUndefined(value)) {\r\n            return false;\r\n          } else if(isArray(value) || isObject(value)) {\r\n            value = toJson(value);\r\n          }\r\n\r\n          if (!browserSupportsCookies) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');\r\n            return false;\r\n          }\r\n\r\n          try {\r\n            var expiry = '',\r\n            expiryDate = new Date(),\r\n            cookieDomain = '';\r\n\r\n            if (value === null) {\r\n              // Mark that the cookie has expired one day ago\r\n              expiryDate.setTime(expiryDate.getTime() + (-1 * 24 * 60 * 60 * 1000));\r\n              expiry = \"; expires=\" + expiryDate.toGMTString();\r\n              value = '';\r\n            } else if (isNumber(daysToExpiry) && daysToExpiry !== 0) {\r\n              expiryDate.setTime(expiryDate.getTime() + (daysToExpiry * 24 * 60 * 60 * 1000));\r\n              expiry = \"; expires=\" + expiryDate.toGMTString();\r\n            } else if (cookie.expiry !== 0) {\r\n              expiryDate.setTime(expiryDate.getTime() + (cookie.expiry * 24 * 60 * 60 * 1000));\r\n              expiry = \"; expires=\" + expiryDate.toGMTString();\r\n            }\r\n            if (!!key) {\r\n              var cookiePath = \"; path=\" + cookie.path;\r\n              if(cookie.domain){\r\n                cookieDomain = \"; domain=\" + cookie.domain;\r\n              }\r\n              $document.cookie = deriveQualifiedKey(key) + \"=\" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;\r\n            }\r\n          } catch (e) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\r\n            return false;\r\n          }\r\n          return true;\r\n        };\r\n\r\n        // Directly get a value from a cookie\r\n        // Example use: localStorageService.cookie.get('library'); // returns 'angular'\r\n        var getFromCookies = function (key) {\r\n          if (!browserSupportsCookies) {\r\n            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');\r\n            return false;\r\n          }\r\n\r\n          var cookies = $document.cookie && $document.cookie.split(';') || [];\r\n          for(var i=0; i < cookies.length; i++) {\r\n            var thisCookie = cookies[i];\r\n            while (thisCookie.charAt(0) === ' ') {\r\n              thisCookie = thisCookie.substring(1,thisCookie.length);\r\n            }\r\n            if (thisCookie.indexOf(deriveQualifiedKey(key) + '=') === 0) {\r\n              var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));\r\n              try {\r\n                return JSON.parse(storedValues);\r\n              } catch(e) {\r\n                return storedValues;\r\n              }\r\n            }\r\n          }\r\n          return null;\r\n        };\r\n\r\n        var removeFromCookies = function (key) {\r\n          addToCookies(key,null);\r\n        };\r\n\r\n        var clearAllFromCookies = function () {\r\n          var thisCookie = null, thisKey = null;\r\n          var prefixLength = prefix.length;\r\n          var cookies = $document.cookie.split(';');\r\n          for(var i = 0; i < cookies.length; i++) {\r\n            thisCookie = cookies[i];\r\n\r\n            while (thisCookie.charAt(0) === ' ') {\r\n              thisCookie = thisCookie.substring(1, thisCookie.length);\r\n            }\r\n\r\n            var key = thisCookie.substring(prefixLength, thisCookie.indexOf('='));\r\n            removeFromCookies(key);\r\n          }\r\n        };\r\n\r\n        var getStorageType = function() {\r\n          return storageType;\r\n        };\r\n\r\n        // Add a listener on scope variable to save its changes to local storage\r\n        // Return a function which when called cancels binding\r\n        var bindToScope = function(scope, key, def, lsKey) {\r\n          lsKey = lsKey || key;\r\n          var value = getFromLocalStorage(lsKey);\r\n\r\n          if (value === null && isDefined(def)) {\r\n            value = def;\r\n          } else if (isObject(value) && isObject(def)) {\r\n            value = extend(value, def);\r\n          }\r\n\r\n          $parse(key).assign(scope, value);\r\n\r\n          return scope.$watch(key, function(newVal) {\r\n            addToLocalStorage(lsKey, newVal);\r\n          }, isObject(scope[key]));\r\n        };\r\n\r\n        // Return localStorageService.length\r\n        // ignore keys that not owned\r\n        var lengthOfLocalStorage = function() {\r\n          var count = 0;\r\n          var storage = $window[storageType];\r\n          for(var i = 0; i < storage.length; i++) {\r\n            if(storage.key(i).indexOf(prefix) === 0 ) {\r\n              count++;\r\n            }\r\n          }\r\n          return count;\r\n        };\r\n\r\n        return {\r\n          isSupported: browserSupportsLocalStorage,\r\n          getStorageType: getStorageType,\r\n          set: addToLocalStorage,\r\n          add: addToLocalStorage, //DEPRECATED\r\n          get: getFromLocalStorage,\r\n          keys: getKeysForLocalStorage,\r\n          remove: removeFromLocalStorage,\r\n          clearAll: clearAllFromLocalStorage,\r\n          bind: bindToScope,\r\n          deriveKey: deriveQualifiedKey,\r\n          length: lengthOfLocalStorage,\r\n          cookie: {\r\n            isSupported: browserSupportsCookies,\r\n            set: addToCookies,\r\n            add: addToCookies, //DEPRECATED\r\n            get: getFromCookies,\r\n            remove: removeFromCookies,\r\n            clearAll: clearAllFromCookies\r\n          }\r\n        };\r\n      }];\r\n  });\r\n})(window, window.angular);"]}