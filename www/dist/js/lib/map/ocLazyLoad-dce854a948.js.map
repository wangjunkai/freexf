{"version":3,"sources":["ocLazyLoad-dce854a948.js"],"names":["angular","window","regModules","regInvokes","regConfigs","modulesToLoad","realModules","recordDeclarations","broadcast","noop","runBlocks","justLoaded","ocLazyLoad","module","provider","$controllerProvider","$provide","$compileProvider","$filterProvider","$injector","$animateProvider","_register","providers","registerModules","params","k","moduleName","moduleFn","tempRunBlocks","length","isString","getModuleName","indexOf","modules","newModule","ngModuleFct","push","requires","_runBlocks","shift","isDefined","rerun","concat","_invokeQueue","reconfig","_configBlocks","pop","instanceInjector","getInstanceInjector","forEach","fn","invoke","_registerInvokeList","args","checkHashes","potentialNew","invokes","newHash","isNew","signature","data","isArray","hashCode","toString","isObject","stringify","invokeList","type","newInvoke","isUndefined","onInvoke","invokeName","hasOwnProperty","key","queue","i","len","Error","apply","callInvoke","fct","invoked","isFunction","j","jlen","name","moduleExists","e","test","message","debug","events","moduleCache","modulePromises","value","this","Array","prototype","arguments","config","moduleConfig","_init","element","elements","names","NG_APP_CLASS_REGEXP","append","elm","document","getElementById","replace","querySelectorAll","className","match","exec","attributes","attr","jasmine","mocha","mock","console","error","addReg","mainModule","obj","JSON","cache","str","chr","hash","charCodeAt","$get","$log","$rootElement","$rootScope","$cacheFactory","$q","reject","deferred","defer","promise","filesCache","injector","eventName","$broadcast","info","_broadcast","_$log","_getFilesCache","toggleWatch","watch","getModuleConfig","copy","setModuleConfig","getModules","isLoaded","modulesNames","moduleLoaded","_getModuleName","_getModule","_loadDependencies","localParams","loadedModule","diff","promisesList","self","when","getRequires","requireEntry","undefined","files","filter","n","warn","filesLoader","then","entry","all","inject","real","_addToLoadList","res","slice","loadNext","resolve","err","requireModule","_unregister","bootstrapFct","bootstrap","force","configFn","exports","directive","$ocLazyLoad","$compile","$animate","$parse","$timeout","restrict","terminal","priority","compile","attrs","content","innerHTML","html","$scope","$element","$attr","model","$watch","load","enter","contents","decorator","$delegate","$window","$interval","uaCssChecked","useCssLoadPatch","anchor","getElementsByTagName","buildElement","path","el","loaded","cacheBuster","url","dc","Date","getTime","substring","get","put","createElement","rel","href","src","remove","onload","onerror","async","serie","insertBeforeElem","lastChild","insertBefore","jQuery","querySelector","parentNode","ua","navigator","userAgent","toLowerCase","platform","v","appVersion","iOSVersion","parseFloat","parseInt","join","androidVersion","versionMatch","tries","interval","sheet","cssRules","cancel","cssFiles","templatesFiles","jsFiles","promises","cachePromise","extend","pushFile","m","file_type","substr","jsLoader","cssDeferred","cssLoader","templatesDeferred","templatesLoader","jsDeferred","originalModule","errText","originalParams","deferredList","versionsNum","template","paths","callback","ocLazyLoadLoader","$templateCache","$http","success","node","nodeName","id","searchElement","fromIndex","TypeError","O","Object","Math","abs","Infinity","max"],"mappings":"CAOA,SAAWA,EAASC,GAChB,YAEA,IAAIC,IAAc,KAAM,eACpBC,KACAC,KACAC,KAEJC,KAEAC,KACIC,EAAYR,EAAQS,KACpBC,KACAC,KAEAC,EAAaZ,EAAQa,OAAO,eAAgB,MAEhDD,GAAWE,SAAS,eAAgB,sBAAuB,WAAY,mBAAoB,kBAAmB,YAAa,mBAAoB,SAAUC,EAAqBC,EAAUC,EAAkBC,EAAiBC,EAAWC,GAqJlO,QAASC,GAAUC,EAAWC,EAAiBC,GAC3C,GAAID,EAAiB,CACjB,GAAIE,GACAC,EACAC,EACAC,IACJ,KAAKH,EAAIF,EAAgBM,OAAS,EAAGJ,GAAK,EAAGA,IAKzC,GAJAC,EAAaH,EAAgBE,GACxBzB,EAAQ8B,SAASJ,KAClBA,EAAaK,EAAcL,IAE1BA,GAAiD,KAAnCf,EAAWqB,QAAQN,MAAsBO,EAAQP,IAAmD,KAApCpB,EAAY0B,QAAQN,IAAvG,CAIA,GAAIQ,GAA+C,KAAnChC,EAAW8B,QAAQN,EAMnC,IALAC,EAAWQ,EAAYT,GACnBQ,IACAhC,EAAWkC,KAAKV,GAChBL,EAAUC,EAAWK,EAASU,SAAUb,IAExCG,EAASW,WAAWT,OAAS,EAG7B,IADAnB,EAAUgB,MACHC,EAASW,WAAWT,OAAS,GAChCnB,EAAUgB,GAAYU,KAAKT,EAASW,WAAWC,QAGnDvC,GAAQwC,UAAU9B,EAAUgB,MAAiBQ,GAAaV,EAAOiB,SACjEb,EAAgBA,EAAcc,OAAOhC,EAAUgB,KAEnDiB,EAAarB,EAAWK,EAASgB,aAAcjB,EAAYF,EAAOoB,UAClED,EAAarB,EAAWK,EAASkB,cAAenB,EAAYF,EAAOoB,UACnEpC,EAAU0B,EAAY,0BAA4B,4BAA6BR,GAC/EH,EAAgBuB,MAChBnC,EAAWyB,KAAKV,GAGpB,GAAIqB,GAAmBzB,EAAU0B,qBACjChD,GAAQiD,QAAQrB,EAAe,SAAUsB,GACrCH,EAAiBI,OAAOD,MAKpC,QAASE,GAAoBC,EAAM3B,GAqB/B,QAAS4B,GAAYC,EAAcC,GAC/B,GACIC,GADAC,GAAQ,CAQZ,OANIF,GAAQ3B,SACR4B,EAAUE,EAAUJ,GACpBvD,EAAQiD,QAAQO,EAAS,SAAUL,GAC/BO,EAAQA,GAASC,EAAUR,KAAYM,KAGxCC,EAGX,QAASC,GAAUC,GACf,MAAI5D,GAAQ6D,QAAQD,GAETE,EAASF,EAAKG,YACd/D,EAAQgE,SAASJ,GAEjBE,EAASG,EAAUL,IAEtB5D,EAAQwC,UAAUoB,IAAkB,OAATA,EACpBE,EAASF,EAAKG,YAGdH,EA5CnB,GAAIM,GAAab,EAAK,GAAG,GACrBc,EAAOd,EAAK,GACZe,GAAY,CACZpE,GAAQqE,YAAYlE,EAAWuB,MAC/BvB,EAAWuB,OAEX1B,EAAQqE,YAAYlE,EAAWuB,GAAYyC,MAC3ChE,EAAWuB,GAAYyC,MAE3B,IAAIG,GAAW,SAAkBC,EAAYpB,GACpChD,EAAWuB,GAAYyC,GAAMK,eAAeD,KAC7CpE,EAAWuB,GAAYyC,GAAMI,OAE7BjB,EAAYH,EAAQhD,EAAWuB,GAAYyC,GAAMI,MACjDH,GAAY,EACZjE,EAAWuB,GAAYyC,GAAMI,GAAYnC,KAAKe,GAC9C3C,EAAU,8BAA+BkB,EAAYyC,EAAMI,KAiCnE,IAAIvE,EAAQ8B,SAASoC,GACjBI,EAASJ,EAAYb,EAAK,GAAG,QAC1B,CAAA,IAAIrD,EAAQgE,SAASE,GAWxB,OAAO,CAVPlE,GAAQiD,QAAQiB,EAAY,SAAUf,EAAQsB,GACtCzE,EAAQ8B,SAASqB,GAEjBmB,EAASnB,EAAQe,EAAW,IAG5BI,EAASG,EAAKtB,KAM1B,MAAOiB,GAGX,QAASzB,GAAarB,EAAWoD,EAAOhD,EAAYkB,GAChD,GAAK8B,EAAL,CAIA,GAAIC,GAAGC,EAAKvB,EAAMvC,CAClB,KAAK6D,EAAI,EAAGC,EAAMF,EAAM7C,OAAY+C,EAAJD,EAASA,IAErC,GADAtB,EAAOqB,EAAMC,GACT3E,EAAQ6D,QAAQR,GAAO,CACvB,GAAkB,OAAd/B,EAAoB,CACpB,IAAIA,EAAUkD,eAAenB,EAAK,IAG9B,KAAM,IAAIwB,OAAM,wBAA0BxB,EAAK,GAF/CvC,GAAWQ,EAAU+B,EAAK,IAKlC,GAAIK,GAAQN,EAAoBC,EAAM3B,EACtC,IAAgB,WAAZ2B,EAAK,GACDK,GAAS1D,EAAQwC,UAAU1B,IAC3BA,EAASuC,EAAK,IAAIyB,MAAMhE,EAAUuC,EAAK,QAExC,CAEH,GAAI0B,GAAa,SAAoBC,GACjC,GAAIC,GAAU7E,EAAW4B,QAAQN,EAAa,IAAMsD,IACpC,KAAZC,GAAkBrC,KACF,KAAZqC,GACA7E,EAAWgC,KAAKV,EAAa,IAAMsD,GAEnChF,EAAQwC,UAAU1B,IAClBA,EAASuC,EAAK,IAAIyB,MAAMhE,EAAUuC,EAAK,KAInD,IAAIrD,EAAQkF,WAAW7B,EAAK,GAAG,IAC3B0B,EAAW1B,EAAK,GAAG,QAChB,IAAIrD,EAAQ6D,QAAQR,EAAK,GAAG,IAC/B,IAAK,GAAI8B,GAAI,EAAGC,EAAO/B,EAAK,GAAG,GAAGxB,OAAYuD,EAAJD,EAAUA,IAC5CnF,EAAQkF,WAAW7B,EAAK,GAAG,GAAG8B,KAC9BJ,EAAW1B,EAAK,GAAG,GAAG8B,OASlD,QAASpD,GAAclB,GACnB,GAAIa,GAAa,IAMjB,OALI1B,GAAQ8B,SAASjB,GACjBa,EAAab,EACNb,EAAQgE,SAASnD,IAAWA,EAAO2D,eAAe,SAAWxE,EAAQ8B,SAASjB,EAAOwE,QAC5F3D,EAAab,EAAOwE,MAEjB3D,EAGX,QAAS4D,GAAa5D,GAClB,IAAK1B,EAAQ8B,SAASJ,GAClB,OAAO,CAEX,KACI,MAAOS,GAAYT,GACrB,MAAO6D,GACL,GAAI,YAAYC,KAAKD,IAAMA,EAAEE,QAAQzD,QAAQ,mBAAqB,GAC9D,OAAO,GAvUnB,GAAIC,MACAX,GACAP,oBAAqBA,EACrBE,iBAAkBA,EAClBC,gBAAiBA,EACjBF,SAAUA,EACVG,UAAWA,EACXC,iBAAkBA,GAElBsE,GAAQ,EACRC,GAAS,EACTC,KACAC,IAEJD,GAAYxD,KAAO,SAAU0D,GACG,KAAxBC,KAAK/D,QAAQ8D,IACbE,MAAMC,UAAU7D,KAAK0C,MAAMiB,KAAMG,YAIzCH,KAAKI,OAAS,SAAUA,GAEhBnG,EAAQwC,UAAU2D,EAAOlE,WACrBjC,EAAQ6D,QAAQsC,EAAOlE,SACvBjC,EAAQiD,QAAQkD,EAAOlE,QAAS,SAAUmE,GACtCnE,EAAQmE,EAAaf,MAAQe,IAGjCnE,EAAQkE,EAAOlE,QAAQoD,MAAQc,EAAOlE,SAI1CjC,EAAQwC,UAAU2D,EAAOT,SACzBA,EAAQS,EAAOT,OAGf1F,EAAQwC,UAAU2D,EAAOR,UACzBA,EAASQ,EAAOR,SAQxBI,KAAKM,MAAQ,SAAeC,GAExB,GAA6B,IAAzBjG,EAAcwB,OAAc,CAC5B,GAAI0E,IAAYD,GACZE,GAAS,SAAU,SAAU,WAAY,eACzCC,EAAsB,oCACtBC,EAAS,SAAgBC,GACzB,MAAOA,IAAOJ,EAASnE,KAAKuE,GAGhC3G,GAAQiD,QAAQuD,EAAO,SAAUnB,GAC7BmB,EAAMnB,IAAQ,EACdqB,EAAOE,SAASC,eAAexB,IAC/BA,EAAOA,EAAKyB,QAAQ,IAAK,OACC,mBAAfR,GAAQ,IAAsBA,EAAQ,GAAGS,mBAChD/G,EAAQiD,QAAQqD,EAAQ,GAAGS,iBAAiB,IAAM1B,GAAOqB,GACzD1G,EAAQiD,QAAQqD,EAAQ,GAAGS,iBAAiB,IAAM1B,EAAO,OAAQqB,GACjE1G,EAAQiD,QAAQqD,EAAQ,GAAGS,iBAAiB,IAAM1B,EAAO,KAAMqB,MAIvE1G,EAAQiD,QAAQsD,EAAU,SAAUI,GAChC,GAA6B,IAAzBtG,EAAcwB,OAAc,CAC5B,GAAImF,GAAY,IAAMV,EAAQU,UAAY,IACtCC,EAAQR,EAAoBS,KAAKF,EACjCC,GACA5G,EAAc+B,MAAM6E,EAAM,IAAM,IAAIH,QAAQ,OAAQ,MAEpD9G,EAAQiD,QAAQ0D,EAAIQ,WAAY,SAAUC,GACT,IAAzB/G,EAAcwB,QAAgB2E,EAAMY,EAAK/B,OACzChF,EAAc+B,KAAKgF,EAAKtB,YAQnB,IAAzBzF,EAAcwB,SAAmB5B,EAAOoH,SAAWpH,EAAOqH,QAAUtH,EAAQwC,UAAUxC,EAAQuH,OAC9FC,QAAQC,MAAM,uJAGlB,IAAIC,GAAS,QAASA,GAAOhG,GACzB,GAAuC,KAAnCxB,EAAW8B,QAAQN,GAAoB,CAEvCxB,EAAWkC,KAAKV,EAChB,IAAIiG,GAAa3H,EAAQa,OAAOa,EAGhCiB,GAAa,KAAMgF,EAAWhF,aAAcjB,GAC5CiB,EAAa,KAAMgF,EAAW9E,cAAenB,GAE7C1B,EAAQiD,QAAQ0E,EAAWtF,SAAUqF,IAI7C1H,GAAQiD,QAAQ5C,EAAe,SAAUqB,GACrCgG,EAAOhG,KAGXrB,KACAE,EAAmBuC,MAOvB,IAAImB,GAAY,SAAmB2D,GAC/B,IACI,MAAOC,MAAK5D,UAAU2D,GACxB,MAAOrC,GACL,GAAIuC,KACJ,OAAOD,MAAK5D,UAAU2D,EAAK,SAAUnD,EAAKqB,GACtC,GAAI9F,EAAQgE,SAAS8B,IAAoB,OAAVA,EAAgB,CAC3C,GAA6B,KAAzBgC,EAAM9F,QAAQ8D,GAEd,MAGJgC,GAAM1F,KAAK0D,GAEf,MAAOA,OAKfhC,EAAW,SAAkBiE,GAC7B,GACIpD,GACAqD,EACApD,EAHAqD,EAAO,CAIX,IAAkB,GAAdF,EAAIlG,OACJ,MAAOoG,EAEX,KAAKtD,EAAI,EAAGC,EAAMmD,EAAIlG,OAAY+C,EAAJD,EAASA,IACnCqD,EAAMD,EAAIG,WAAWvD,GACrBsD,GAAQA,GAAQ,GAAKA,EAAOD,EAC5BC,GAAQ,CAEZ,OAAOA,GA2LXlC,MAAKoC,MAAQ,OAAQ,eAAgB,aAAc,gBAAiB,KAAM,SAAUC,EAAMC,EAAcC,EAAYC,EAAeC,GAyB/H,QAASC,GAAOlD,GACZ,GAAImD,GAAWF,EAAGG,OAGlB,OAFAP,GAAKX,MAAMlC,EAAEE,SACbiD,EAASD,OAAOlD,GACTmD,EAASE,QA5BpB,GAAI7F,GACA8F,EAAaN,EAAc,aA8B/B,OA5BK7C,KACD0C,KACAA,EAAY,MAAIpI,EAAQS,KACxB2H,EAAW,KAAIpI,EAAQS,KACvB2H,EAAW,KAAIpI,EAAQS,MAI3Ba,EAAU0B,oBAAsB,WAC5B,MAAOD,GAAmBA,EAAmBA,EAAmBsF,EAAazE,KAAK,cAAgB5D,EAAQ8I,YAG9GtI,EAAY,SAAmBuI,EAAWvH,GAClCmE,GACA2C,EAAWU,WAAWD,EAAWvH,GAEjCkE,GACA0C,EAAKa,KAAKF,EAAWvH,KAYzB0H,WAAY1I,EAEZ2I,MAAOf,EAMPgB,eAAgB,WACZ,MAAOP,IAOXQ,YAAa,SAAqBC,GAC1BA,EACA/I,EAAmB6B,MAAK,GAExB7B,EAAmBuC,OAS3ByG,gBAAiB,SAAyB7H,GACtC,IAAK1B,EAAQ8B,SAASJ,GAClB,KAAM,IAAImD,OAAM,iDAEpB,OAAK5C,GAAQP,GAGN1B,EAAQwJ,KAAKvH,EAAQP,IAFjB,MAUf+H,gBAAiB,SAAyBrD,GACtC,IAAKpG,EAAQgE,SAASoC,GAClB,KAAM,IAAIvB,OAAM,mDAGpB,OADA5C,GAAQmE,EAAaf,MAAQe,EACtBA,GAOXsD,WAAY,WACR,MAAOxJ,IAQXyJ,SAAU,SAAkBC,GACxB,GAAIC,GAAe,SAAsBhJ,GACrC,GAAI8I,GAAWzJ,EAAW8B,QAAQnB,GAAU,EAI5C,OAHK8I,KACDA,IAAarE,EAAazE,IAEvB8I,EAKX,IAHI3J,EAAQ8B,SAAS8H,KACjBA,GAAgBA,IAEhB5J,EAAQ6D,QAAQ+F,GAAe,CAC/B,GAAIjF,GAAGC,CACP,KAAKD,EAAI,EAAGC,EAAMgF,EAAa/H,OAAY+C,EAAJD,EAASA,IAC5C,IAAKkF,EAAaD,EAAajF,IAC3B,OAAO,CAGf,QAAO,EAEP,KAAM,IAAIE,OAAM,6CASxBiF,eAAgB/H,EAOhBgI,WAAY,SAAmBrI,GAC3B,IACI,MAAOS,GAAYT,GACrB,MAAO6D,GAKL,MAHI,YAAYC,KAAKD,IAAMA,EAAEE,QAAQzD,QAAQ,mBAAqB,MAC9DuD,EAAEE,QAAU,eAAiBxB,EAAUvC,GAAc,iDAAmD6D,EAAEE,SAExGF,IASdD,aAAcA,EASd0E,kBAAmB,SAA2BtI,EAAYuI,GACtD,GAAIC,GACA7H,EACA8H,EACAC,KACAC,EAAOtE,IAIX,IAFArE,EAAa2I,EAAKP,eAAepI,GAEd,OAAfA,EACA,MAAO8G,GAAG8B,MAEV,KACIJ,EAAeG,EAAKN,WAAWrI,GACjC,MAAO6D,GACL,MAAOkD,GAAOlD,GAgFtB,MA7EIlD,GAAWgI,EAAKE,YAAYL,GAGhClK,EAAQiD,QAAQZ,EAAU,SAAUmI,GAGhC,GAAIxK,EAAQ8B,SAAS0I,GAAe,CAChC,GAAIrE,GAASkE,EAAKd,gBAAgBiB,EAClC,IAAe,OAAXrE,EAEA,WADAP,GAAYxD,KAAKoI,EAGrBA,GAAerE,EAEfA,EAAOd,KAAOoF,OAIlB,GAAIJ,EAAK/E,aAAakF,EAAanF,MAY/B,MAVA8E,GAAOK,EAAaE,MAAMC,OAAO,SAAUC,GACvC,MAAOP,GAAKd,gBAAgBiB,EAAanF,MAAMqF,MAAM1I,QAAQ4I,GAAK,IAIlD,IAAhBT,EAAKtI,QACLwI,EAAKlB,MAAM0B,KAAK,WAAYnJ,EAAY,0DAA2D8I,EAAanF,KAAM,+BAAgC8E,GAItJnK,EAAQwC,UAAU6H,EAAKS,iBAEvBV,GAAahI,KAAKiI,EAAKS,YAAYN,EAAcP,GAAac,KAAK,WAC/D,MAAOV,GAAKL,kBAAkBQ,MAG3B/B,EAAO,GAAI5D,OAAM,kEAAoE2F,EAAaE,MAAQ,sCAGlH,IAAI1K,EAAQ6D,QAAQ2G,GAAe,CACtC,GAAIE,KACJ1K,GAAQiD,QAAQuH,EAAc,SAAUQ,GAEpC,GAAI7E,GAASkE,EAAKd,gBAAgByB,EACnB,QAAX7E,EACAuE,EAAMtI,KAAK4I,GACJ7E,EAAOuE,QACdA,EAAQA,EAAMhI,OAAOyD,EAAOuE,UAGhCA,EAAM7I,OAAS,IACf2I,GACIE,MAAOA,QAGR1K,GAAQgE,SAASwG,IACpBA,EAAahG,eAAe,SAAWgG,EAAmB,OAE1DH,EAAKZ,gBAAgBe,GACrB5E,EAAYxD,KAAKoI,EAAmB,MAK5C,IAAIxK,EAAQwC,UAAUgI,EAAaE,QAAwC,IAA9BF,EAAaE,MAAM7I,OAAc,CAC1E,IAAI7B,EAAQwC,UAAU6H,EAAKS,aAMvB,MAAOrC,GAAO,GAAI5D,OAAM,sBAAwB2F,EAAanF,KAAO,mCAAqCmF,EAAaE,MAAQ,sCAJ9HN,GAAahI,KAAKiI,EAAKS,YAAYN,EAAcP,GAAac,KAAK,WAC/D,MAAOV,GAAKL,kBAAkBQ,SASvChC,EAAGyC,IAAIb,IASlBc,OAAQ,SAAgBxJ,GACpB,GAAIuI,GAAc/D,UAAUrE,QAAU,GAAsB4I,SAAjBvE,UAAU,MAAwBA,UAAU,GACnFiF,EAAOjF,UAAUrE,QAAU,GAAsB4I,SAAjBvE,UAAU,IAAmB,EAAQA,UAAU,GAE/EmE,EAAOtE,KACP2C,EAAWF,EAAGG,OAClB,IAAI3I,EAAQwC,UAAUd,IAA8B,OAAfA,EAAqB,CACtD,GAAI1B,EAAQ6D,QAAQnC,GAAa,CAC7B,GAAI0I,KAIJ,OAHApK,GAAQiD,QAAQvB,EAAY,SAAUb,GAClCuJ,EAAahI,KAAKiI,EAAKa,OAAOrK,EAAQoJ,EAAakB,MAEhD3C,EAAGyC,IAAIb,GAEdC,EAAKe,eAAef,EAAKP,eAAepI,IAAa,EAAMyJ,GAGnE,GAAI9K,EAAcwB,OAAS,EAAG,CAC1B,GAAIwJ,GAAMhL,EAAciL,QACpBC,EAAW,QAASA,GAAS7J,GAC7BkE,EAAYxD,KAAKV,GACjBmE,EAAenE,GAAcgH,EAASE,QACtCyB,EAAKL,kBAAkBtI,EAAYuI,GAAac,KAAK,WACjD,IACIpK,KACAU,EAAUC,EAAWsE,EAAaqE,GACpC,MAAO1E,GAGL,MAFA8E,GAAKlB,MAAM1B,MAAMlC,EAAEE,aACnBiD,GAASD,OAAOlD,GAIhBlF,EAAcwB,OAAS,EACvB0J,EAASlL,EAAckC,SAEnBmG,EAAS8C,QAAQH,IAE1B,SAAeI,GACd/C,EAASD,OAAOgD,KAKxBF,GAASlL,EAAckC,aACpB,CAAA,GAAI0H,GAAeA,EAAY5E,MAAQQ,EAAeoE,EAAY5E,MACrE,MAAOQ,GAAeoE,EAAY5E,KAElCqD,GAAS8C,UAEb,MAAO9C,GAASE,SAQpB2B,YAAa,SAAqB1J,GAC9B,GAAIwB,KAMJ,OALArC,GAAQiD,QAAQpC,EAAOwB,SAAU,SAAUqJ,GACG,KAAtCxL,EAAW8B,QAAQ0J,IACnBrJ,EAASD,KAAKsJ,KAGfrJ,GAWXM,aAAcA,EAQdS,oBAAqBA,EASrB/B,UAAWA,EAQX+J,eAAgBA,EAMhBO,YAAa,SAAqB1J,GAC1BjC,EAAQwC,UAAUP,IACdjC,EAAQ6D,QAAQ5B,IAChBjC,EAAQiD,QAAQhB,EAAS,SAAUpB,GAC/BV,EAAWU,GAAU4J,aAS7C1E,KAAKM,MAAMrG,EAAQsG,QAAQrG,EAAO2G,aAGtC,IAAIgF,GAAe5L,EAAQ6L,SAC3B7L,GAAQ6L,UAAY,SAAUvF,EAASrE,EAASkE,GAK5C,MAHAnG,GAAQiD,QAAQhB,EAAQqJ,QAAS,SAAUzK,GACvCuK,EAAevK,GAAQ,GAAM,KAE1B+K,EAAatF,EAASrE,EAASkE,GAG1C,IAAIiF,GAAiB,SAAwB/F,EAAMyG,EAAOX,IACjD5K,EAAmBsB,OAAS,GAAKiK,IAAU9L,EAAQ8B,SAASuD,IAAyC,KAAhChF,EAAc2B,QAAQqD,KAC5FhF,EAAc+B,KAAKiD,GACf8F,GACA7K,EAAY8B,KAAKiD,KAKzBlD,EAAcnC,EAAQa,MAC1Bb,GAAQa,OAAS,SAAUwE,EAAMhD,EAAU0J,GAEvC,MADAX,GAAe/F,GAAM,GAAO,GACrBlD,EAAYkD,EAAMhD,EAAU0J,IAIjB,mBAAXlL,SAA6C,mBAAZmL,UAA2BnL,OAAOmL,UAAYA,UACtFnL,OAAOmL,QAAU,gBAEtBhM,QAASC,QACZ,SAAWD,GACP,YAEAA,GAAQa,OAAO,eAAeoL,UAAU,cAAe,cAAe,WAAY,WAAY,SAAU,WAAY,SAAUC,EAAaC,EAAUC,EAAUC,EAAQC,GACnK,OACIC,SAAU,IACVC,UAAU,EACVC,SAAU,IACVC,QAAS,SAAiBpG,EAASqG,GAE/B,GAAIC,GAAUtG,EAAQ,GAAGuG,SAGzB,OAFAvG,GAAQwG,KAAK,IAEN,SAAUC,EAAQC,EAAUC,GAC/B,GAAIC,GAAQb,EAAOY,EAAMrM,WACzBmM,GAAOI,OAAO,WACV,MAAOD,GAAMH,IAAWE,EAAMrM,YAC/B,SAAUc,GAEL1B,EAAQwC,UAAUd,IAClBwK,EAAYkB,KAAK1L,GAAYqJ,KAAK,WAK9BqB,EAASiB,MAAMT,EAASI,GAExBb,EAASa,EAASM,YAAYP,OAGvC,UAKpB/M,SACH,SAAWA,GACP,YAEAA,GAAQa,OAAO,eAAesF,QAAQ,WAAY,SAAUnF,GACxDA,EAASuM,UAAU,eAAgB,YAAa,KAAM,UAAW,YAAa,SAAUC,EAAWhF,EAAIiF,EAASC,GAC5G,GAAIC,IAAe,EACfC,GAAkB,EAClBC,EAASJ,EAAQ7G,SAASkH,qBAAqB,QAAQ,IAAML,EAAQ7G,SAASkH,qBAAqB,QAAQ,EAoH/G,OA3GAN,GAAUO,aAAe,SAAsB5J,EAAM6J,EAAMxM,GACvD,GACIyM,GACAC,EAFAxF,EAAWF,EAAGG,QAGdE,EAAa2E,EAAUpE,iBACvB+E,EAAc,SAAqBC,GACnC,GAAIC,IAAK,GAAIC,OAAOC,SACpB,OAAIH,GAAIpM,QAAQ,MAAQ,EACqB,MAArCoM,EAAII,UAAU,EAAGJ,EAAIvM,OAAS,GACvBuM,EAAM,OAASC,EAEnBD,EAAM,QAAUC,EAEhBD,EAAM,QAAUC,EAY/B,QALIrO,EAAQqE,YAAYwE,EAAW4F,IAAIT,KACnCnF,EAAW6F,IAAIV,EAAMtF,EAASE,SAI1BzE,GACJ,IAAK,MACD8J,EAAKR,EAAQ7G,SAAS+H,cAAc,QACpCV,EAAG9J,KAAO,WACV8J,EAAGW,IAAM,aACTX,EAAGY,KAAOrN,EAAOsG,SAAU,EAAQqG,EAAYH,GAAQA,CACvD,MACJ,KAAK,KACDC,EAAKR,EAAQ7G,SAAS+H,cAAc,UACpCV,EAAGa,IAAMtN,EAAOsG,SAAU,EAAQqG,EAAYH,GAAQA,CACtD,MACJ,SACInF,EAAWkG,OAAOf,GAClBtF,EAASD,OAAO,GAAI5D,OAAM,mBAAqBV,EAAO,qCAAuC6J,EAAO,MAG5GC,EAAGe,OAASf,EAAuB,mBAAI,SAAU1I,GACzC0I,EAAe,aAAM,WAAWzI,KAAKyI,EAAe,aAAMC,IAC9DD,EAAGe,OAASf,EAAuB,mBAAI,KACvCC,EAAS,EACTV,EAAUtE,WAAW,wBAAyB8E,GAC9CtF,EAAS8C,YAEbyC,EAAGgB,QAAU,WACTpG,EAAWkG,OAAOf,GAClBtF,EAASD,OAAO,GAAI5D,OAAM,kBAAoBmJ,KAElDC,EAAGiB,MAAQ1N,EAAO2N,MAAQ,EAAI,CAE9B,IAAIC,GAAmBvB,EAAOwB,SAC9B,IAAI7N,EAAO8N,aAAc,CACrB,GAAIhJ,GAAUtG,EAAQsG,QAAQtG,EAAQwC,UAAUvC,OAAOsP,QAAU/N,EAAO8N,aAAe1I,SAAS4I,cAAchO,EAAO8N,cACjHhJ,IAAWA,EAAQzE,OAAS,IAC5BuN,EAAmB9I,EAAQ,IAWnC,GARA8I,EAAiBK,WAAWH,aAAarB,EAAImB,GAQjC,OAARjL,EAAe,CACf,IAAKwJ,EAAc,CACf,GAAI+B,GAAKjC,EAAQkC,UAAUC,UAAUC,aAGrC,IAAI,iBAAiBrK,KAAKiI,EAAQkC,UAAUG,UAAW,CACnD,GAAIC,GAAItC,EAAQkC,UAAUK,WAAW/I,MAAM,0BACvCgJ,EAAaC,YAAYC,SAASJ,EAAE,GAAI,IAAKI,SAASJ,EAAE,GAAI,IAAKI,SAASJ,EAAE,IAAM,EAAG,KAAKK,KAAK,KACnGxC,GAA+B,EAAbqC,MACf,IAAIP,EAAG1N,QAAQ,WAAa,GAAI,CAEnC,GAAIqO,GAAiBH,WAAWR,EAAGpE,MAAMoE,EAAG1N,QAAQ,WAAa,GACjE4L,GAAmC,IAAjByC,MACf,IAAIX,EAAG1N,QAAQ,UAAY,GAAI,CAClC,GAAIsO,GAAeZ,EAAGzI,MAAM,sBAC5B2G,GAAkB0C,GAAgBA,EAAa,IAAMJ,WAAWI,EAAa,IAAM,GAI3F,GAAI1C,EACA,GAAI2C,GAAQ,IACRC,EAAW9C,EAAU,WACrB,IACIO,EAAGwC,MAAMC,SACThD,EAAUiD,OAAOH,GACjBvC,EAAGe,SACL,MAAOzJ,KACCgL,GAAS,GACXtC,EAAGgB,YAGZ,IAIX,MAAOvG,GAASE,SAGb4E,SAGhBxN,SACH,SAAWA,GACP,YAEAA,GAAQa,OAAO,eAAesF,QAAQ,WAAY,SAAUnF,GACxDA,EAASuM,UAAU,eAAgB,YAAa,KAAM,SAAUC,EAAWhF,GAwOvE,MAjOAgF,GAAU1C,YAAc,SAAqB3E,GACzC,GAAI3E,GAAS0E,UAAUrE,QAAU,GAAsB4I,SAAjBvE,UAAU,MAAwBA,UAAU,GAE9E0K,KACAC,KACAC,KACAC,KACAC,EAAe,KACfnI,EAAa2E,EAAUpE,gBAE3BoE,GAAUnE,aAAY,GAEtBrJ,EAAQiR,OAAOzP,EAAQ2E,EAEvB,IAAI+K,GAAW,SAAkBlD,GAC7B,GACImD,GADAC,EAAY,IAOhB,IALIpR,EAAQgE,SAASgK,KACjBoD,EAAYpD,EAAK7J,KACjB6J,EAAOA,EAAKA,MAEhBgD,EAAenI,EAAW4F,IAAIT,GAC1BhO,EAAQqE,YAAY2M,IAAiBxP,EAAOsG,SAAU,EAAO,CAS7D,GANyD,QAApDqJ,EAAI,gCAAgCjK,KAAK8G,MAE1CoD,EAAYD,EAAE,GACdnD,EAAOA,EAAKqD,OAAOF,EAAE,GAAGtP,OAAS,EAAGmM,EAAKnM,UAGxCuP,EACD,GAAkE,QAA7DD,EAAI,yCAAyCjK,KAAK8G,IAEnDoD,EAAYD,EAAE,OACX,CAAA,GAAK3D,EAAU8D,SAAS9M,eAAe,sBAAuBgJ,EAAU8D,SAAS9M,eAAe,aAKnG,WADAgJ,GAAUrE,MAAM1B,MAAM,sCAAwCuG,EAF9DoD,GAAY,KAOD,QAAdA,GAAqC,SAAdA,GAAoD,KAA3BR,EAAS5O,QAAQgM,GAE5C,SAAdoD,GAAsC,QAAdA,GAAyD,KAAjCP,EAAe7O,QAAQgM,GAE1D,OAAdoD,GAAgD,KAA1BN,EAAQ9O,QAAQgM,GAC7C8C,EAAQ1O,KAAK4L,GAEbR,EAAUrE,MAAM1B,MAAM,2BAA6BuG,GAJnD6C,EAAezO,KAAK4L,GAFpB4C,EAASxO,KAAK4L,OAQXgD,IACPD,EAAS3O,KAAK4O,GAYtB,IARIxP,EAAO2N,MACP+B,EAAS1P,EAAOkJ,MAAMnI,SAEtBvC,EAAQiD,QAAQzB,EAAOkJ,MAAO,SAAUsD,GACpCkD,EAASlD,KAIb4C,EAAS/O,OAAS,EAAG,CACrB,GAAI0P,GAAc/I,EAAGG,OACrB6E,GAAUgE,UAAUZ,EAAU,SAAUnF,GAChCzL,EAAQwC,UAAUiJ,IAAQ+B,EAAUgE,UAAUhN,eAAe,qBAC7DgJ,EAAUrE,MAAM1B,MAAMgE,GACtB8F,EAAY9I,OAAOgD,IAEnB8F,EAAY/F,WAEjBhK,GACHuP,EAAS3O,KAAKmP,EAAY3I,SAG9B,GAAIiI,EAAehP,OAAS,EAAG,CAC3B,GAAI4P,GAAoBjJ,EAAGG,OAC3B6E,GAAUkE,gBAAgBb,EAAgB,SAAUpF,GAC5CzL,EAAQwC,UAAUiJ,IAAQ+B,EAAUkE,gBAAgBlN,eAAe,qBACnEgJ,EAAUrE,MAAM1B,MAAMgE,GACtBgG,EAAkBhJ,OAAOgD,IAEzBgG,EAAkBjG,WAEvBhK,GACHuP,EAAS3O,KAAKqP,EAAkB7I,SAGpC,GAAIkI,EAAQjP,OAAS,EAAG,CACpB,GAAI8P,GAAanJ,EAAGG,OACpB6E,GAAU8D,SAASR,EAAS,SAAUrF,GAC9BzL,EAAQwC,UAAUiJ,KAAS+B,EAAU8D,SAAS9M,eAAe,qBAAuBgJ,EAAU8D,SAAS9M,eAAe,eACtHgJ,EAAUrE,MAAM1B,MAAMgE,GACtBkG,EAAWlJ,OAAOgD,IAElBkG,EAAWnG,WAEhBhK,GACHuP,EAAS3O,KAAKuP,EAAW/I,SAG7B,GAAwB,IAApBmI,EAASlP,OAAc,CACvB,GAAI6G,GAAWF,EAAGG,QACd8C,EAAM,0IAGV,OAFA+B,GAAUrE,MAAM1B,MAAMgE,GACtB/C,EAASD,OAAOgD,GACT/C,EAASE,QACb,MAAIpH,GAAO2N,OAAS3N,EAAOkJ,MAAM7I,OAAS,EACtC2G,EAAGyC,IAAI8F,GAAUhG,KAAK,WACzB,MAAOyC,GAAU1C,YAAY3E,EAAQ3E,KAGlCgH,EAAGyC,IAAI8F,GAAU,WAAW,SAAU1F,GAEzC,MADAmC,GAAUnE,aAAY,GACfgC,KAWnBmC,EAAUJ,KAAO,SAAUwE,GACvB,GAMIC,GANAC,EAAiB5L,UAAUrE,QAAU,GAAsB4I,SAAjBvE,UAAU,MAAwBA,UAAU,GAEtFmE,EAAOtE,KACPI,EAAS,KACT4L,KACArJ,EAAWF,EAAGG,OAKlB,IAA+B,mBAArB1I,QAAkB,YACjC,GAAIY,GAASb,EAAQwJ,KAAKoI,GAAiB3R,OAAO+R,gBAElD,IAAInR,GAASb,EAAQwJ,KAAKoI,EAGrB,IAAIpQ,GAASxB,EAAQwJ,KAAKsI,EAG1B,IAAI9R,EAAQ6D,QAAQhD,GAahB,MAXAb,GAAQiD,QAAQpC,EAAQ,SAAUsQ,GAC9BY,EAAa3P,KAAKiI,EAAK+C,KAAK+D,EAAG3P,MAInCgH,EAAGyC,IAAI8G,GAAchH,KAAK,SAAUM,GAChC3C,EAAS8C,QAAQH,IAClB,SAAUI,GACT/C,EAASD,OAAOgD,KAGb/C,EAASE,OAsBpB,IAlBI5I,EAAQ8B,SAASjB,IACjBsF,EAASkE,EAAKd,gBAAgB1I,GACzBsF,IACDA,GACIuE,OAAQ7J,MAGTb,EAAQgE,SAASnD,KAGpBsF,EADAnG,EAAQwC,UAAU3B,EAAOmN,OAAShO,EAAQwC,UAAU3B,EAAOsD,OAEvDuG,OAAQ7J,IAGHwJ,EAAKZ,gBAAgB5I,IAIvB,OAAXsF,EAAiB,CACjB,GAAIzE,GAAa2I,EAAKP,eAAejJ,EAIrC,OAHAgR,GAAU,YAAcnQ,GAAc,WAAa,oCACnD8L,EAAUrE,MAAM1B,MAAMoK,GACtBnJ,EAASD,OAAO,GAAI5D,OAAMgN,IACnBnJ,EAASE,QAGZ5I,EAAQwC,UAAU2D,EAAO8L,YACrBjS,EAAQqE,YAAY8B,EAAOuE,SAC3BvE,EAAOuE,UAEP1K,EAAQ8B,SAASqE,EAAO8L,UACxB9L,EAAOuE,MAAMtI,KAAK+D,EAAO8L,UAClBjS,EAAQ6D,QAAQsC,EAAO8L,WAC9B9L,EAAOuE,MAAMhI,OAAOyD,EAAO8L,UAKvC,IAAIhI,GAAcjK,EAAQiR,UAAWzP,EAAQ2E,EAG7C,OAAInG,GAAQqE,YAAY8B,EAAOuE,QAAU1K,EAAQwC,UAAU2D,EAAOd,OAASmI,EAAUlI,aAAaa,EAAOd,MAC9FmI,EAAUtC,OAAO/E,EAAOd,KAAM4E,GAAa,IAGtDuD,EAAU1C,YAAY3E,EAAQ8D,GAAac,KAAK,WAC5CyC,EAAUtC,OAAO,KAAMjB,GAAac,KAAK,SAAUM,GAC/C3C,EAAS8C,QAAQH,IAClB,SAAUI,GACT/C,EAASD,OAAOgD,MAErB,SAAUA,GACT/C,EAASD,OAAOgD,KAGb/C,EAASE,UAIb4E,SAGhBxN,SACH,SAAWA,GACP,YAEAA,GAAQa,OAAO,eAAesF,QAAQ,WAAY,SAAUnF,GACxDA,EAASuM,UAAU,eAAgB,YAAa,KAAM,SAAUC,EAAWhF,GAsBvE,MAbAgF,GAAUgE,UAAY,SAAUU,EAAOC,EAAU3Q,GAC7C,GAAIuP,KACJ/Q,GAAQiD,QAAQiP,EAAO,SAAUlE,GAC7B+C,EAAS3O,KAAKoL,EAAUO,aAAa,MAAOC,EAAMxM,MAEtDgH,EAAGyC,IAAI8F,GAAUhG,KAAK,WAClBoH,KACD,SAAU1G,GACT0G,EAAS1G,MAGjB+B,EAAUgE,UAAUY,kBAAmB,EAEhC5E,SAGhBxN,SACH,SAAWA,GACP,YAEAA,GAAQa,OAAO,eAAesF,QAAQ,WAAY,SAAUnF,GACxDA,EAASuM,UAAU,eAAgB,YAAa,KAAM,SAAUC,EAAWhF,GAsBvE,MAbAgF,GAAU8D,SAAW,SAAUY,EAAOC,EAAU3Q,GAC5C,GAAIuP,KACJ/Q,GAAQiD,QAAQiP,EAAO,SAAUlE,GAC7B+C,EAAS3O,KAAKoL,EAAUO,aAAa,KAAMC,EAAMxM,MAErDgH,EAAGyC,IAAI8F,GAAUhG,KAAK,WAClBoH,KACD,SAAU1G,GACT0G,EAAS1G,MAGjB+B,EAAU8D,SAASc,kBAAmB,EAE/B5E,SAGhBxN,SACH,SAAWA,GACP,YAEAA,GAAQa,OAAO,eAAesF,QAAQ,WAAY,SAAUnF,GACxDA,EAASuM,UAAU,eAAgB,YAAa,iBAAkB,KAAM,QAAS,SAAUC,EAAW6E,EAAgB7J,EAAI8J,GAwCtH,MA/BA9E,GAAUkE,gBAAkB,SAAUQ,EAAOC,EAAU3Q,GACnD,GAAIuP,MACAlI,EAAa2E,EAAUpE,gBAqB3B,OAnBApJ,GAAQiD,QAAQiP,EAAO,SAAU9D,GAC7B,GAAI1F,GAAWF,EAAGG,OAClBoI,GAAS3O,KAAKsG,EAASE,SACvB0J,EAAM7D,IAAIL,EAAK5M,GAAQ+Q,QAAQ,SAAU3O,GACjC5D,EAAQ8B,SAAS8B,IAASA,EAAK/B,OAAS,GACxC7B,EAAQiD,QAAQjD,EAAQsG,QAAQ1C,GAAO,SAAU4O,GACvB,WAAlBA,EAAKC,UAAuC,qBAAdD,EAAKrO,MACnCkO,EAAe3D,IAAI8D,EAAKE,GAAIF,EAAK3F,aAIzC7M,EAAQqE,YAAYwE,EAAW4F,IAAIL,KACnCvF,EAAW6F,IAAIN,GAAK,GAExB1F,EAAS8C,YACV/D,MAAM,SAAUgE,GACf/C,EAASD,OAAO,GAAI5D,OAAM,iCAAmCuJ,EAAM,MAAQ3C,QAG5EjD,EAAGyC,IAAI8F,GAAUhG,KAAK,WACzBoH,KACD,SAAU1G,GACT0G,EAAS1G,MAGjB+B,EAAUkE,gBAAgBU,kBAAmB,EAEtC5E,SAGhBxN,SAEEgG,MAAMC,UAAUjE,UACjBgE,MAAMC,UAAUjE,QAAU,SAAU2Q,EAAeC,GAC/C,GAAInR,EAIJ,IAAY,MAARsE,KACA,KAAM,IAAI8M,WAAU,gCAGxB,IAAIC,GAAIC,OAAOhN,MAKXnB,EAAMkO,EAAEjR,SAAW,CAGvB,IAAY,IAAR+C,EACA,MAAO,EAKX,IAAIgG,IAAKgI,GAAa,CAOtB,IALII,KAAKC,IAAIrI,KAAOsI,EAAAA,IAChBtI,EAAI,GAIJA,GAAKhG,EACL,MAAO,EASX,KAHAnD,EAAIuR,KAAKG,IAAIvI,GAAK,EAAIA,EAAIhG,EAAMoO,KAAKC,IAAIrI,GAAI,GAGlChG,EAAJnD,GAAS,CAaZ,GAAIA,IAAKqR,IAAKA,EAAErR,KAAOkR,EACnB,MAAOlR,EAEXA,KAEJ,MAAO","file":"../ocLazyLoad-dce854a948.js","sourcesContent":["/**\r\n * oclazyload - Load modules on demand (lazy load) with angularJS\r\n * @version v1.0.9\r\n * @link https://github.com/ocombe/ocLazyLoad\r\n * @license MIT\r\n * @author Olivier Combe <olivier.combe@gmail.com>\r\n */\r\n(function (angular, window) {\r\n    'use strict';\r\n\r\n    var regModules = ['ng', 'oc.lazyLoad'],\r\n        regInvokes = {},\r\n        regConfigs = [],\r\n        modulesToLoad = [],\r\n        // modules to load from angular.module or other sources\r\n    realModules = [],\r\n        // real modules called from angular.module\r\n    recordDeclarations = [],\r\n        broadcast = angular.noop,\r\n        runBlocks = {},\r\n        justLoaded = [];\r\n\r\n    var ocLazyLoad = angular.module('oc.lazyLoad', ['ng']);\r\n\r\n    ocLazyLoad.provider('$ocLazyLoad', [\"$controllerProvider\", \"$provide\", \"$compileProvider\", \"$filterProvider\", \"$injector\", \"$animateProvider\", function ($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {\r\n        var modules = {},\r\n            providers = {\r\n            $controllerProvider: $controllerProvider,\r\n            $compileProvider: $compileProvider,\r\n            $filterProvider: $filterProvider,\r\n            $provide: $provide, // other things (constant, decorator, provider, factory, service)\r\n            $injector: $injector,\r\n            $animateProvider: $animateProvider\r\n        },\r\n            debug = false,\r\n            events = false,\r\n            moduleCache = [],\r\n            modulePromises = {};\r\n\r\n        moduleCache.push = function (value) {\r\n            if (this.indexOf(value) === -1) {\r\n                Array.prototype.push.apply(this, arguments);\r\n            }\r\n        };\r\n\r\n        this.config = function (config) {\r\n            // If we want to define modules configs\r\n            if (angular.isDefined(config.modules)) {\r\n                if (angular.isArray(config.modules)) {\r\n                    angular.forEach(config.modules, function (moduleConfig) {\r\n                        modules[moduleConfig.name] = moduleConfig;\r\n                    });\r\n                } else {\r\n                    modules[config.modules.name] = config.modules;\r\n                }\r\n            }\r\n\r\n            if (angular.isDefined(config.debug)) {\r\n                debug = config.debug;\r\n            }\r\n\r\n            if (angular.isDefined(config.events)) {\r\n                events = config.events;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Get the list of existing registered modules\r\n         * @param element\r\n         */\r\n        this._init = function _init(element) {\r\n            // this is probably useless now because we override angular.bootstrap\r\n            if (modulesToLoad.length === 0) {\r\n                var elements = [element],\r\n                    names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],\r\n                    NG_APP_CLASS_REGEXP = /\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/,\r\n                    append = function append(elm) {\r\n                    return elm && elements.push(elm);\r\n                };\r\n\r\n                angular.forEach(names, function (name) {\r\n                    names[name] = true;\r\n                    append(document.getElementById(name));\r\n                    name = name.replace(':', '\\\\:');\r\n                    if (typeof element[0] !== 'undefined' && element[0].querySelectorAll) {\r\n                        angular.forEach(element[0].querySelectorAll('.' + name), append);\r\n                        angular.forEach(element[0].querySelectorAll('.' + name + '\\\\:'), append);\r\n                        angular.forEach(element[0].querySelectorAll('[' + name + ']'), append);\r\n                    }\r\n                });\r\n\r\n                angular.forEach(elements, function (elm) {\r\n                    if (modulesToLoad.length === 0) {\r\n                        var className = ' ' + element.className + ' ';\r\n                        var match = NG_APP_CLASS_REGEXP.exec(className);\r\n                        if (match) {\r\n                            modulesToLoad.push((match[2] || '').replace(/\\s+/g, ','));\r\n                        } else {\r\n                            angular.forEach(elm.attributes, function (attr) {\r\n                                if (modulesToLoad.length === 0 && names[attr.name]) {\r\n                                    modulesToLoad.push(attr.value);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (modulesToLoad.length === 0 && !((window.jasmine || window.mocha) && angular.isDefined(angular.mock))) {\r\n                console.error('No module found during bootstrap, unable to init ocLazyLoad. You should always use the ng-app directive or angular.boostrap when you use ocLazyLoad.');\r\n            }\r\n\r\n            var addReg = function addReg(moduleName) {\r\n                if (regModules.indexOf(moduleName) === -1) {\r\n                    // register existing modules\r\n                    regModules.push(moduleName);\r\n                    var mainModule = angular.module(moduleName);\r\n\r\n                    // register existing components (directives, services, ...)\r\n                    _invokeQueue(null, mainModule._invokeQueue, moduleName);\r\n                    _invokeQueue(null, mainModule._configBlocks, moduleName); // angular 1.3+\r\n\r\n                    angular.forEach(mainModule.requires, addReg);\r\n                }\r\n            };\r\n\r\n            angular.forEach(modulesToLoad, function (moduleName) {\r\n                addReg(moduleName);\r\n            });\r\n\r\n            modulesToLoad = []; // reset for next bootstrap\r\n            recordDeclarations.pop(); // wait for the next lazy load\r\n        };\r\n\r\n        /**\r\n         * Like JSON.stringify but that doesn't throw on circular references\r\n         * @param obj\r\n         */\r\n        var stringify = function stringify(obj) {\r\n            try {\r\n                return JSON.stringify(obj);\r\n            } catch (e) {\r\n                var cache = [];\r\n                return JSON.stringify(obj, function (key, value) {\r\n                    if (angular.isObject(value) && value !== null) {\r\n                        if (cache.indexOf(value) !== -1) {\r\n                            // Circular reference found, discard key\r\n                            return;\r\n                        }\r\n                        // Store value in our collection\r\n                        cache.push(value);\r\n                    }\r\n                    return value;\r\n                });\r\n            }\r\n        };\r\n\r\n        var hashCode = function hashCode(str) {\r\n            var hash = 0,\r\n                i,\r\n                chr,\r\n                len;\r\n            if (str.length == 0) {\r\n                return hash;\r\n            }\r\n            for (i = 0, len = str.length; i < len; i++) {\r\n                chr = str.charCodeAt(i);\r\n                hash = (hash << 5) - hash + chr;\r\n                hash |= 0; // Convert to 32bit integer\r\n            }\r\n            return hash;\r\n        };\r\n\r\n        function _register(providers, registerModules, params) {\r\n            if (registerModules) {\r\n                var k,\r\n                    moduleName,\r\n                    moduleFn,\r\n                    tempRunBlocks = [];\r\n                for (k = registerModules.length - 1; k >= 0; k--) {\r\n                    moduleName = registerModules[k];\r\n                    if (!angular.isString(moduleName)) {\r\n                        moduleName = getModuleName(moduleName);\r\n                    }\r\n                    if (!moduleName || justLoaded.indexOf(moduleName) !== -1 || modules[moduleName] && realModules.indexOf(moduleName) === -1) {\r\n                        continue;\r\n                    }\r\n                    // new if not registered\r\n                    var newModule = regModules.indexOf(moduleName) === -1;\r\n                    moduleFn = ngModuleFct(moduleName);\r\n                    if (newModule) {\r\n                        regModules.push(moduleName);\r\n                        _register(providers, moduleFn.requires, params);\r\n                    }\r\n                    if (moduleFn._runBlocks.length > 0) {\r\n                        // new run blocks detected! Replace the old ones (if existing)\r\n                        runBlocks[moduleName] = [];\r\n                        while (moduleFn._runBlocks.length > 0) {\r\n                            runBlocks[moduleName].push(moduleFn._runBlocks.shift());\r\n                        }\r\n                    }\r\n                    if (angular.isDefined(runBlocks[moduleName]) && (newModule || params.rerun)) {\r\n                        tempRunBlocks = tempRunBlocks.concat(runBlocks[moduleName]);\r\n                    }\r\n                    _invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);\r\n                    _invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig); // angular 1.3+\r\n                    broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);\r\n                    registerModules.pop();\r\n                    justLoaded.push(moduleName);\r\n                }\r\n                // execute the run blocks at the end\r\n                var instanceInjector = providers.getInstanceInjector();\r\n                angular.forEach(tempRunBlocks, function (fn) {\r\n                    instanceInjector.invoke(fn);\r\n                });\r\n            }\r\n        }\r\n\r\n        function _registerInvokeList(args, moduleName) {\r\n            var invokeList = args[2][0],\r\n                type = args[1],\r\n                newInvoke = false;\r\n            if (angular.isUndefined(regInvokes[moduleName])) {\r\n                regInvokes[moduleName] = {};\r\n            }\r\n            if (angular.isUndefined(regInvokes[moduleName][type])) {\r\n                regInvokes[moduleName][type] = {};\r\n            }\r\n            var onInvoke = function onInvoke(invokeName, invoke) {\r\n                if (!regInvokes[moduleName][type].hasOwnProperty(invokeName)) {\r\n                    regInvokes[moduleName][type][invokeName] = [];\r\n                }\r\n                if (checkHashes(invoke, regInvokes[moduleName][type][invokeName])) {\r\n                    newInvoke = true;\r\n                    regInvokes[moduleName][type][invokeName].push(invoke);\r\n                    broadcast('ocLazyLoad.componentLoaded', [moduleName, type, invokeName]);\r\n                }\r\n            };\r\n\r\n            function checkHashes(potentialNew, invokes) {\r\n                var isNew = true,\r\n                    newHash;\r\n                if (invokes.length) {\r\n                    newHash = signature(potentialNew);\r\n                    angular.forEach(invokes, function (invoke) {\r\n                        isNew = isNew && signature(invoke) !== newHash;\r\n                    });\r\n                }\r\n                return isNew;\r\n            }\r\n\r\n            function signature(data) {\r\n                if (angular.isArray(data)) {\r\n                    // arrays are objects, we need to test for it first\r\n                    return hashCode(data.toString());\r\n                } else if (angular.isObject(data)) {\r\n                    // constants & values for example\r\n                    return hashCode(stringify(data));\r\n                } else {\r\n                    if (angular.isDefined(data) && data !== null) {\r\n                        return hashCode(data.toString());\r\n                    } else {\r\n                        // null & undefined constants\r\n                        return data;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (angular.isString(invokeList)) {\r\n                onInvoke(invokeList, args[2][1]);\r\n            } else if (angular.isObject(invokeList)) {\r\n                angular.forEach(invokeList, function (invoke, key) {\r\n                    if (angular.isString(invoke)) {\r\n                        // decorators for example\r\n                        onInvoke(invoke, invokeList[1]);\r\n                    } else {\r\n                        // components registered as object lists {\"componentName\": function() {}}\r\n                        onInvoke(key, invoke);\r\n                    }\r\n                });\r\n            } else {\r\n                return false;\r\n            }\r\n            return newInvoke;\r\n        }\r\n\r\n        function _invokeQueue(providers, queue, moduleName, reconfig) {\r\n            if (!queue) {\r\n                return;\r\n            }\r\n\r\n            var i, len, args, provider;\r\n            for (i = 0, len = queue.length; i < len; i++) {\r\n                args = queue[i];\r\n                if (angular.isArray(args)) {\r\n                    if (providers !== null) {\r\n                        if (providers.hasOwnProperty(args[0])) {\r\n                            provider = providers[args[0]];\r\n                        } else {\r\n                            throw new Error('unsupported provider ' + args[0]);\r\n                        }\r\n                    }\r\n                    var isNew = _registerInvokeList(args, moduleName);\r\n                    if (args[1] !== 'invoke') {\r\n                        if (isNew && angular.isDefined(provider)) {\r\n                            provider[args[1]].apply(provider, args[2]);\r\n                        }\r\n                    } else {\r\n                        // config block\r\n                        var callInvoke = function callInvoke(fct) {\r\n                            var invoked = regConfigs.indexOf(moduleName + '-' + fct);\r\n                            if (invoked === -1 || reconfig) {\r\n                                if (invoked === -1) {\r\n                                    regConfigs.push(moduleName + '-' + fct);\r\n                                }\r\n                                if (angular.isDefined(provider)) {\r\n                                    provider[args[1]].apply(provider, args[2]);\r\n                                }\r\n                            }\r\n                        };\r\n                        if (angular.isFunction(args[2][0])) {\r\n                            callInvoke(args[2][0]);\r\n                        } else if (angular.isArray(args[2][0])) {\r\n                            for (var j = 0, jlen = args[2][0].length; j < jlen; j++) {\r\n                                if (angular.isFunction(args[2][0][j])) {\r\n                                    callInvoke(args[2][0][j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getModuleName(module) {\r\n            var moduleName = null;\r\n            if (angular.isString(module)) {\r\n                moduleName = module;\r\n            } else if (angular.isObject(module) && module.hasOwnProperty('name') && angular.isString(module.name)) {\r\n                moduleName = module.name;\r\n            }\r\n            return moduleName;\r\n        }\r\n\r\n        function moduleExists(moduleName) {\r\n            if (!angular.isString(moduleName)) {\r\n                return false;\r\n            }\r\n            try {\r\n                return ngModuleFct(moduleName);\r\n            } catch (e) {\r\n                if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.$get = [\"$log\", \"$rootElement\", \"$rootScope\", \"$cacheFactory\", \"$q\", function ($log, $rootElement, $rootScope, $cacheFactory, $q) {\r\n            var instanceInjector,\r\n                filesCache = $cacheFactory('ocLazyLoad');\r\n\r\n            if (!debug) {\r\n                $log = {};\r\n                $log['error'] = angular.noop;\r\n                $log['warn'] = angular.noop;\r\n                $log['info'] = angular.noop;\r\n            }\r\n\r\n            // Make this lazy because when $get() is called the instance injector hasn't been assigned to the rootElement yet\r\n            providers.getInstanceInjector = function () {\r\n                return instanceInjector ? instanceInjector : instanceInjector = $rootElement.data('$injector') || angular.injector();\r\n            };\r\n\r\n            broadcast = function broadcast(eventName, params) {\r\n                if (events) {\r\n                    $rootScope.$broadcast(eventName, params);\r\n                }\r\n                if (debug) {\r\n                    $log.info(eventName, params);\r\n                }\r\n            };\r\n\r\n            function reject(e) {\r\n                var deferred = $q.defer();\r\n                $log.error(e.message);\r\n                deferred.reject(e);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return {\r\n                _broadcast: broadcast,\r\n\r\n                _$log: $log,\r\n\r\n                /**\r\n                 * Returns the files cache used by the loaders to store the files currently loading\r\n                 * @returns {*}\r\n                 */\r\n                _getFilesCache: function getFilesCache() {\r\n                    return filesCache;\r\n                },\r\n\r\n                /**\r\n                 * Let the service know that it should monitor angular.module because files are loading\r\n                 * @param watch boolean\r\n                 */\r\n                toggleWatch: function toggleWatch(watch) {\r\n                    if (watch) {\r\n                        recordDeclarations.push(true);\r\n                    } else {\r\n                        recordDeclarations.pop();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Let you get a module config object\r\n                 * @param moduleName String the name of the module\r\n                 * @returns {*}\r\n                 */\r\n                getModuleConfig: function getModuleConfig(moduleName) {\r\n                    if (!angular.isString(moduleName)) {\r\n                        throw new Error('You need to give the name of the module to get');\r\n                    }\r\n                    if (!modules[moduleName]) {\r\n                        return null;\r\n                    }\r\n                    return angular.copy(modules[moduleName]);\r\n                },\r\n\r\n                /**\r\n                 * Let you define a module config object\r\n                 * @param moduleConfig Object the module config object\r\n                 * @returns {*}\r\n                 */\r\n                setModuleConfig: function setModuleConfig(moduleConfig) {\r\n                    if (!angular.isObject(moduleConfig)) {\r\n                        throw new Error('You need to give the module config object to set');\r\n                    }\r\n                    modules[moduleConfig.name] = moduleConfig;\r\n                    return moduleConfig;\r\n                },\r\n\r\n                /**\r\n                 * Returns the list of loaded modules\r\n                 * @returns {string[]}\r\n                 */\r\n                getModules: function getModules() {\r\n                    return regModules;\r\n                },\r\n\r\n                /**\r\n                 * Let you check if a module has been loaded into Angular or not\r\n                 * @param modulesNames String/Object a module name, or a list of module names\r\n                 * @returns {boolean}\r\n                 */\r\n                isLoaded: function isLoaded(modulesNames) {\r\n                    var moduleLoaded = function moduleLoaded(module) {\r\n                        var isLoaded = regModules.indexOf(module) > -1;\r\n                        if (!isLoaded) {\r\n                            isLoaded = !!moduleExists(module);\r\n                        }\r\n                        return isLoaded;\r\n                    };\r\n                    if (angular.isString(modulesNames)) {\r\n                        modulesNames = [modulesNames];\r\n                    }\r\n                    if (angular.isArray(modulesNames)) {\r\n                        var i, len;\r\n                        for (i = 0, len = modulesNames.length; i < len; i++) {\r\n                            if (!moduleLoaded(modulesNames[i])) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    } else {\r\n                        throw new Error('You need to define the module(s) name(s)');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Given a module, return its name\r\n                 * @param module\r\n                 * @returns {String}\r\n                 */\r\n                _getModuleName: getModuleName,\r\n\r\n                /**\r\n                 * Returns a module if it exists\r\n                 * @param moduleName\r\n                 * @returns {module}\r\n                 */\r\n                _getModule: function getModule(moduleName) {\r\n                    try {\r\n                        return ngModuleFct(moduleName);\r\n                    } catch (e) {\r\n                        // this error message really suxx\r\n                        if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {\r\n                            e.message = 'The module \"' + stringify(moduleName) + '\" that you are trying to load does not exist. ' + e.message;\r\n                        }\r\n                        throw e;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Check if a module exists and returns it if it does\r\n                 * @param moduleName\r\n                 * @returns {boolean}\r\n                 */\r\n                moduleExists: moduleExists,\r\n\r\n                /**\r\n                 * Load the dependencies, and might try to load new files depending on the config\r\n                 * @param moduleName (String or Array of Strings)\r\n                 * @param localParams\r\n                 * @returns {*}\r\n                 * @private\r\n                 */\r\n                _loadDependencies: function _loadDependencies(moduleName, localParams) {\r\n                    var loadedModule,\r\n                        requires,\r\n                        diff,\r\n                        promisesList = [],\r\n                        self = this;\r\n\r\n                    moduleName = self._getModuleName(moduleName);\r\n\r\n                    if (moduleName === null) {\r\n                        return $q.when();\r\n                    } else {\r\n                        try {\r\n                            loadedModule = self._getModule(moduleName);\r\n                        } catch (e) {\r\n                            return reject(e);\r\n                        }\r\n                        // get unloaded requires\r\n                        requires = self.getRequires(loadedModule);\r\n                    }\r\n\r\n                    angular.forEach(requires, function (requireEntry) {\r\n                        // If no configuration is provided, try and find one from a previous load.\r\n                        // If there isn't one, bail and let the normal flow run\r\n                        if (angular.isString(requireEntry)) {\r\n                            var config = self.getModuleConfig(requireEntry);\r\n                            if (config === null) {\r\n                                moduleCache.push(requireEntry); // We don't know about this module, but something else might, so push it anyway.\r\n                                return;\r\n                            }\r\n                            requireEntry = config;\r\n                            // ignore the name because it's probably not a real module name\r\n                            config.name = undefined;\r\n                        }\r\n\r\n                        // Check if this dependency has been loaded previously\r\n                        if (self.moduleExists(requireEntry.name)) {\r\n                            // compare against the already loaded module to see if the new definition adds any new files\r\n                            diff = requireEntry.files.filter(function (n) {\r\n                                return self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0;\r\n                            });\r\n\r\n                            // If the module was redefined, advise via the console\r\n                            if (diff.length !== 0) {\r\n                                self._$log.warn('Module \"', moduleName, '\" attempted to redefine configuration for dependency. \"', requireEntry.name, '\"\\n Additional Files Loaded:', diff);\r\n                            }\r\n\r\n                            // Push everything to the file loader, it will weed out the duplicates.\r\n                            if (angular.isDefined(self.filesLoader)) {\r\n                                // if a files loader is defined\r\n                                promisesList.push(self.filesLoader(requireEntry, localParams).then(function () {\r\n                                    return self._loadDependencies(requireEntry);\r\n                                }));\r\n                            } else {\r\n                                return reject(new Error('Error: New dependencies need to be loaded from external files (' + requireEntry.files + '), but no loader has been defined.'));\r\n                            }\r\n                            return;\r\n                        } else if (angular.isArray(requireEntry)) {\r\n                            var files = [];\r\n                            angular.forEach(requireEntry, function (entry) {\r\n                                // let's check if the entry is a file name or a config name\r\n                                var config = self.getModuleConfig(entry);\r\n                                if (config === null) {\r\n                                    files.push(entry);\r\n                                } else if (config.files) {\r\n                                    files = files.concat(config.files);\r\n                                }\r\n                            });\r\n                            if (files.length > 0) {\r\n                                requireEntry = {\r\n                                    files: files\r\n                                };\r\n                            }\r\n                        } else if (angular.isObject(requireEntry)) {\r\n                            if (requireEntry.hasOwnProperty('name') && requireEntry['name']) {\r\n                                // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.\r\n                                self.setModuleConfig(requireEntry);\r\n                                moduleCache.push(requireEntry['name']);\r\n                            }\r\n                        }\r\n\r\n                        // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.\r\n                        if (angular.isDefined(requireEntry.files) && requireEntry.files.length !== 0) {\r\n                            if (angular.isDefined(self.filesLoader)) {\r\n                                // if a files loader is defined\r\n                                promisesList.push(self.filesLoader(requireEntry, localParams).then(function () {\r\n                                    return self._loadDependencies(requireEntry);\r\n                                }));\r\n                            } else {\r\n                                return reject(new Error('Error: the module \"' + requireEntry.name + '\" is defined in external files (' + requireEntry.files + '), but no loader has been defined.'));\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    // Create a wrapper promise to watch the promise list and resolve it once everything is done.\r\n                    return $q.all(promisesList);\r\n                },\r\n\r\n                /**\r\n                 * Inject new modules into Angular\r\n                 * @param moduleName\r\n                 * @param localParams\r\n                 * @param real\r\n                 */\r\n                inject: function inject(moduleName) {\r\n                    var localParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n                    var real = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\r\n\r\n                    var self = this,\r\n                        deferred = $q.defer();\r\n                    if (angular.isDefined(moduleName) && moduleName !== null) {\r\n                        if (angular.isArray(moduleName)) {\r\n                            var promisesList = [];\r\n                            angular.forEach(moduleName, function (module) {\r\n                                promisesList.push(self.inject(module, localParams, real));\r\n                            });\r\n                            return $q.all(promisesList);\r\n                        } else {\r\n                            self._addToLoadList(self._getModuleName(moduleName), true, real);\r\n                        }\r\n                    }\r\n                    if (modulesToLoad.length > 0) {\r\n                        var res = modulesToLoad.slice(); // clean copy\r\n                        var loadNext = function loadNext(moduleName) {\r\n                            moduleCache.push(moduleName);\r\n                            modulePromises[moduleName] = deferred.promise;\r\n                            self._loadDependencies(moduleName, localParams).then(function success() {\r\n                                try {\r\n                                    justLoaded = [];\r\n                                    _register(providers, moduleCache, localParams);\r\n                                } catch (e) {\r\n                                    self._$log.error(e.message);\r\n                                    deferred.reject(e);\r\n                                    return;\r\n                                }\r\n\r\n                                if (modulesToLoad.length > 0) {\r\n                                    loadNext(modulesToLoad.shift()); // load the next in list\r\n                                } else {\r\n                                        deferred.resolve(res); // everything has been loaded, resolve\r\n                                    }\r\n                            }, function error(err) {\r\n                                deferred.reject(err);\r\n                            });\r\n                        };\r\n\r\n                        // load the first in list\r\n                        loadNext(modulesToLoad.shift());\r\n                    } else if (localParams && localParams.name && modulePromises[localParams.name]) {\r\n                        return modulePromises[localParams.name];\r\n                    } else {\r\n                        deferred.resolve();\r\n                    }\r\n                    return deferred.promise;\r\n                },\r\n\r\n                /**\r\n                 * Get the list of required modules/services/... for this module\r\n                 * @param module\r\n                 * @returns {Array}\r\n                 */\r\n                getRequires: function getRequires(module) {\r\n                    var requires = [];\r\n                    angular.forEach(module.requires, function (requireModule) {\r\n                        if (regModules.indexOf(requireModule) === -1) {\r\n                            requires.push(requireModule);\r\n                        }\r\n                    });\r\n                    return requires;\r\n                },\r\n\r\n                /**\r\n                 * Invoke the new modules & component by their providers\r\n                 * @param providers\r\n                 * @param queue\r\n                 * @param moduleName\r\n                 * @param reconfig\r\n                 * @private\r\n                 */\r\n                _invokeQueue: _invokeQueue,\r\n\r\n                /**\r\n                 * Check if a module has been invoked and registers it if not\r\n                 * @param args\r\n                 * @param moduleName\r\n                 * @returns {boolean} is new\r\n                 */\r\n                _registerInvokeList: _registerInvokeList,\r\n\r\n                /**\r\n                 * Register a new module and loads it, executing the run/config blocks if needed\r\n                 * @param providers\r\n                 * @param registerModules\r\n                 * @param params\r\n                 * @private\r\n                 */\r\n                _register: _register,\r\n\r\n                /**\r\n                 * Add a module name to the list of modules that will be loaded in the next inject\r\n                 * @param name\r\n                 * @param force\r\n                 * @private\r\n                 */\r\n                _addToLoadList: _addToLoadList,\r\n\r\n                /**\r\n                 * Unregister modules (you shouldn't have to use this)\r\n                 * @param modules\r\n                 */\r\n                _unregister: function _unregister(modules) {\r\n                    if (angular.isDefined(modules)) {\r\n                        if (angular.isArray(modules)) {\r\n                            angular.forEach(modules, function (module) {\r\n                                regInvokes[module] = undefined;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }];\r\n\r\n        // Let's get the list of loaded modules & components\r\n        this._init(angular.element(window.document));\r\n    }]);\r\n\r\n    var bootstrapFct = angular.bootstrap;\r\n    angular.bootstrap = function (element, modules, config) {\r\n        // we use slice to make a clean copy\r\n        angular.forEach(modules.slice(), function (module) {\r\n            _addToLoadList(module, true, true);\r\n        });\r\n        return bootstrapFct(element, modules, config);\r\n    };\r\n\r\n    var _addToLoadList = function _addToLoadList(name, force, real) {\r\n        if ((recordDeclarations.length > 0 || force) && angular.isString(name) && modulesToLoad.indexOf(name) === -1) {\r\n            modulesToLoad.push(name);\r\n            if (real) {\r\n                realModules.push(name);\r\n            }\r\n        }\r\n    };\r\n\r\n    var ngModuleFct = angular.module;\r\n    angular.module = function (name, requires, configFn) {\r\n        _addToLoadList(name, false, true);\r\n        return ngModuleFct(name, requires, configFn);\r\n    };\r\n\r\n    // CommonJS package manager support:\r\n    if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {\r\n        module.exports = 'oc.lazyLoad';\r\n    }\r\n})(angular, window);\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').directive('ocLazyLoad', [\"$ocLazyLoad\", \"$compile\", \"$animate\", \"$parse\", \"$timeout\", function ($ocLazyLoad, $compile, $animate, $parse, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            terminal: true,\r\n            priority: 1000,\r\n            compile: function compile(element, attrs) {\r\n                // we store the content and remove it before compilation\r\n                var content = element[0].innerHTML;\r\n                element.html('');\r\n\r\n                return function ($scope, $element, $attr) {\r\n                    var model = $parse($attr.ocLazyLoad);\r\n                    $scope.$watch(function () {\r\n                        return model($scope) || $attr.ocLazyLoad; // it can be a module name (string), an object, an array, or a scope reference to any of this\r\n                    }, function (moduleName) {\r\n                        \r\n                        if (angular.isDefined(moduleName)) {\r\n                            $ocLazyLoad.load(moduleName).then(function () {\r\n                                \r\n                                // Attach element contents to DOM and then compile them.\r\n                                // This prevents an issue where IE invalidates saved element objects (HTMLCollections)\r\n                                // of the compiled contents when attaching to the parent DOM.\r\n                                $animate.enter(content, $element);\r\n                                // get the new content & compile it\r\n                                $compile($element.contents())($scope);\r\n                            });\r\n                        }\r\n                    }, true);\r\n                };\r\n            }\r\n        };\r\n    }]);\r\n})(angular);\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\r\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", \"$window\", \"$interval\", function ($delegate, $q, $window, $interval) {\r\n            var uaCssChecked = false,\r\n                useCssLoadPatch = false,\r\n                anchor = $window.document.getElementsByTagName('head')[0] || $window.document.getElementsByTagName('body')[0];\r\n\r\n            /**\r\n             * Load a js/css file\r\n             * @param type\r\n             * @param path\r\n             * @param params\r\n             * @returns promise\r\n             */\r\n            $delegate.buildElement = function buildElement(type, path, params) {\r\n                var deferred = $q.defer(),\r\n                    el,\r\n                    loaded,\r\n                    filesCache = $delegate._getFilesCache(),\r\n                    cacheBuster = function cacheBuster(url) {\r\n                    var dc = new Date().getTime();\r\n                    if (url.indexOf('?') >= 0) {\r\n                        if (url.substring(0, url.length - 1) === '&') {\r\n                            return url + '_dc=' + dc;\r\n                        }\r\n                        return url + '&_dc=' + dc;\r\n                    } else {\r\n                        return url + '?_dc=' + dc;\r\n                    }\r\n                };\r\n\r\n                // Store the promise early so the file load can be detected by other parallel lazy loads\r\n                // (ie: multiple routes on one page) a 'true' value isn't sufficient\r\n                // as it causes false positive load results.\r\n                if (angular.isUndefined(filesCache.get(path))) {\r\n                    filesCache.put(path, deferred.promise);\r\n                }\r\n\r\n                // Switch in case more content types are added later\r\n                switch (type) {\r\n                    case 'css':\r\n                        el = $window.document.createElement('link');\r\n                        el.type = 'text/css';\r\n                        el.rel = 'stylesheet';\r\n                        el.href = params.cache === false ? cacheBuster(path) : path;\r\n                        break;\r\n                    case 'js':\r\n                        el = $window.document.createElement('script');\r\n                        el.src = params.cache === false ? cacheBuster(path) : path;\r\n                        break;\r\n                    default:\r\n                        filesCache.remove(path);\r\n                        deferred.reject(new Error('Requested type \"' + type + '\" is not known. Could not inject \"' + path + '\"'));\r\n                        break;\r\n                }\r\n                el.onload = el['onreadystatechange'] = function (e) {\r\n                    if (el['readyState'] && !/^c|loade/.test(el['readyState']) || loaded) return;\r\n                    el.onload = el['onreadystatechange'] = null;\r\n                    loaded = 1;\r\n                    $delegate._broadcast('ocLazyLoad.fileLoaded', path);\r\n                    deferred.resolve();\r\n                };\r\n                el.onerror = function () {\r\n                    filesCache.remove(path);\r\n                    deferred.reject(new Error('Unable to load ' + path));\r\n                };\r\n                el.async = params.serie ? 0 : 1;\r\n\r\n                var insertBeforeElem = anchor.lastChild;\r\n                if (params.insertBefore) {\r\n                    var element = angular.element(angular.isDefined(window.jQuery) ? params.insertBefore : document.querySelector(params.insertBefore));\r\n                    if (element && element.length > 0) {\r\n                        insertBeforeElem = element[0];\r\n                    }\r\n                }\r\n                insertBeforeElem.parentNode.insertBefore(el, insertBeforeElem);\r\n\r\n                /*\r\n                 The event load or readystatechange doesn't fire in:\r\n                 - iOS < 6       (default mobile browser)\r\n                 - Android < 4.4 (default mobile browser)\r\n                 - Safari < 6    (desktop browser)\r\n                 */\r\n                if (type == 'css') {\r\n                    if (!uaCssChecked) {\r\n                        var ua = $window.navigator.userAgent.toLowerCase();\r\n\r\n                        // iOS < 6\r\n                        if (/iP(hone|od|ad)/.test($window.navigator.platform)) {\r\n                            var v = $window.navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n                            var iOSVersion = parseFloat([parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)].join('.'));\r\n                            useCssLoadPatch = iOSVersion < 6;\r\n                        } else if (ua.indexOf(\"android\") > -1) {\r\n                            // Android < 4.4\r\n                            var androidVersion = parseFloat(ua.slice(ua.indexOf(\"android\") + 8));\r\n                            useCssLoadPatch = androidVersion < 4.4;\r\n                        } else if (ua.indexOf('safari') > -1) {\r\n                            var versionMatch = ua.match(/version\\/([\\.\\d]+)/i);\r\n                            useCssLoadPatch = versionMatch && versionMatch[1] && parseFloat(versionMatch[1]) < 6;\r\n                        }\r\n                    }\r\n\r\n                    if (useCssLoadPatch) {\r\n                        var tries = 1000; // * 20 = 20000 miliseconds\r\n                        var interval = $interval(function () {\r\n                            try {\r\n                                el.sheet.cssRules;\r\n                                $interval.cancel(interval);\r\n                                el.onload();\r\n                            } catch (e) {\r\n                                if (--tries <= 0) {\r\n                                    el.onerror();\r\n                                }\r\n                            }\r\n                        }, 20);\r\n                    }\r\n                }\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            return $delegate;\r\n        }]);\r\n    }]);\r\n})(angular);\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\r\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", function ($delegate, $q) {\r\n            /**\r\n             * The function that loads new files\r\n             * @param config\r\n             * @param params\r\n             * @returns {*}\r\n             */\r\n            $delegate.filesLoader = function filesLoader(config) {\r\n                var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n\r\n                var cssFiles = [],\r\n                    templatesFiles = [],\r\n                    jsFiles = [],\r\n                    promises = [],\r\n                    cachePromise = null,\r\n                    filesCache = $delegate._getFilesCache();\r\n\r\n                $delegate.toggleWatch(true); // start watching angular.module calls\r\n\r\n                angular.extend(params, config);\r\n\r\n                var pushFile = function pushFile(path) {\r\n                    var file_type = null,\r\n                        m;\r\n                    if (angular.isObject(path)) {\r\n                        file_type = path.type;\r\n                        path = path.path;\r\n                    }\r\n                    cachePromise = filesCache.get(path);\r\n                    if (angular.isUndefined(cachePromise) || params.cache === false) {\r\n\r\n                        // always check for requirejs syntax just in case\r\n                        if ((m = /^(css|less|html|htm|js)?(?=!)/.exec(path)) !== null) {\r\n                            // Detect file type using preceding type declaration (ala requireJS)\r\n                            file_type = m[1];\r\n                            path = path.substr(m[1].length + 1, path.length); // Strip the type from the path\r\n                        }\r\n\r\n                        if (!file_type) {\r\n                            if ((m = /[.](css|less|html|htm|js)?((\\?|#).*)?$/.exec(path)) !== null) {\r\n                                // Detect file type via file extension\r\n                                file_type = m[1];\r\n                            } else if (!$delegate.jsLoader.hasOwnProperty('ocLazyLoadLoader') && $delegate.jsLoader.hasOwnProperty('requirejs')) {\r\n                                // requirejs\r\n                                file_type = 'js';\r\n                            } else {\r\n                                $delegate._$log.error('File type could not be determined. ' + path);\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if ((file_type === 'css' || file_type === 'less') && cssFiles.indexOf(path) === -1) {\r\n                            cssFiles.push(path);\r\n                        } else if ((file_type === 'html' || file_type === 'htm') && templatesFiles.indexOf(path) === -1) {\r\n                            templatesFiles.push(path);\r\n                        } else if (file_type === 'js' || jsFiles.indexOf(path) === -1) {\r\n                            jsFiles.push(path);\r\n                        } else {\r\n                            $delegate._$log.error('File type is not valid. ' + path);\r\n                        }\r\n                    } else if (cachePromise) {\r\n                        promises.push(cachePromise);\r\n                    }\r\n                };\r\n\r\n                if (params.serie) {\r\n                    pushFile(params.files.shift());\r\n                } else {\r\n                    angular.forEach(params.files, function (path) {\r\n                        pushFile(path);\r\n                    });\r\n                }\r\n\r\n                if (cssFiles.length > 0) {\r\n                    var cssDeferred = $q.defer();\r\n                    $delegate.cssLoader(cssFiles, function (err) {\r\n                        if (angular.isDefined(err) && $delegate.cssLoader.hasOwnProperty('ocLazyLoadLoader')) {\r\n                            $delegate._$log.error(err);\r\n                            cssDeferred.reject(err);\r\n                        } else {\r\n                            cssDeferred.resolve();\r\n                        }\r\n                    }, params);\r\n                    promises.push(cssDeferred.promise);\r\n                }\r\n\r\n                if (templatesFiles.length > 0) {\r\n                    var templatesDeferred = $q.defer();\r\n                    $delegate.templatesLoader(templatesFiles, function (err) {\r\n                        if (angular.isDefined(err) && $delegate.templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {\r\n                            $delegate._$log.error(err);\r\n                            templatesDeferred.reject(err);\r\n                        } else {\r\n                            templatesDeferred.resolve();\r\n                        }\r\n                    }, params);\r\n                    promises.push(templatesDeferred.promise);\r\n                }\r\n\r\n                if (jsFiles.length > 0) {\r\n                    var jsDeferred = $q.defer();\r\n                    $delegate.jsLoader(jsFiles, function (err) {\r\n                        if (angular.isDefined(err) && ($delegate.jsLoader.hasOwnProperty(\"ocLazyLoadLoader\") || $delegate.jsLoader.hasOwnProperty(\"requirejs\"))) {\r\n                            $delegate._$log.error(err);\r\n                            jsDeferred.reject(err);\r\n                        } else {\r\n                            jsDeferred.resolve();\r\n                        }\r\n                    }, params);\r\n                    promises.push(jsDeferred.promise);\r\n                }\r\n\r\n                if (promises.length === 0) {\r\n                    var deferred = $q.defer(),\r\n                        err = \"Error: no file to load has been found, if you're trying to load an existing module you should use the 'inject' method instead of 'load'.\";\r\n                    $delegate._$log.error(err);\r\n                    deferred.reject(err);\r\n                    return deferred.promise;\r\n                } else if (params.serie && params.files.length > 0) {\r\n                    return $q.all(promises).then(function () {\r\n                        return $delegate.filesLoader(config, params);\r\n                    });\r\n                } else {\r\n                    return $q.all(promises)['finally'](function (res) {\r\n                        $delegate.toggleWatch(false); // stop watching angular.module calls\r\n                        return res;\r\n                    });\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Load a module or a list of modules into Angular\r\n             * @param module Mixed the name of a predefined module config object, or a module config object, or an array of either\r\n             * @param params Object optional parameters\r\n             * @returns promise\r\n             */\r\n            $delegate.load = function (originalModule) {\r\n                var originalParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n\r\n                var self = this,\r\n                    config = null,\r\n                    deferredList = [],\r\n                    deferred = $q.defer(),\r\n                    errText;\r\n\r\n                // clean copy\r\n                //window.versionsNum\r\n                if(typeof(window.versionsNum)!=\"undefined\"){\r\n\t\t        \tvar module = angular.copy(originalModule)+ window.versionsNum;\r\n\t\t        }else{\r\n\t\t        \tvar module = angular.copy(originalModule);\r\n\t\t        }\r\n                \r\n                var params = angular.copy(originalParams);\r\n\r\n                // If module is an array, break it down\r\n                if (angular.isArray(module)) {\r\n                    // Resubmit each entry as a single module\r\n                    angular.forEach(module, function (m) {\r\n                        deferredList.push(self.load(m, params));\r\n                    });\r\n\r\n                    // Resolve the promise once everything has loaded\r\n                    $q.all(deferredList).then(function (res) {\r\n                        deferred.resolve(res);\r\n                    }, function (err) {\r\n                        deferred.reject(err);\r\n                    });\r\n\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Get or Set a configuration depending on what was passed in\r\n                if (angular.isString(module)) {\r\n                    config = self.getModuleConfig(module);\r\n                    if (!config) {\r\n                        config = {\r\n                            files: [module]\r\n                        };\r\n                    }\r\n                } else if (angular.isObject(module)) {\r\n                    // case {type: 'js', path: lazyLoadUrl + 'testModule.fakejs'}\r\n                    if (angular.isDefined(module.path) && angular.isDefined(module.type)) {\r\n                        config = {\r\n                            files: [module]\r\n                        };\r\n                    } else {\r\n                        config = self.setModuleConfig(module);\r\n                    }\r\n                }\r\n\r\n                if (config === null) {\r\n                    var moduleName = self._getModuleName(module);\r\n                    errText = 'Module \"' + (moduleName || 'unknown') + '\" is not configured, cannot load.';\r\n                    $delegate._$log.error(errText);\r\n                    deferred.reject(new Error(errText));\r\n                    return deferred.promise;\r\n                } else {\r\n                    // deprecated\r\n                    if (angular.isDefined(config.template)) {\r\n                        if (angular.isUndefined(config.files)) {\r\n                            config.files = [];\r\n                        }\r\n                        if (angular.isString(config.template)) {\r\n                            config.files.push(config.template);\r\n                        } else if (angular.isArray(config.template)) {\r\n                            config.files.concat(config.template);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var localParams = angular.extend({}, params, config);\r\n\r\n                // if someone used an external loader and called the load function with just the module name\r\n                if (angular.isUndefined(config.files) && angular.isDefined(config.name) && $delegate.moduleExists(config.name)) {\r\n                    return $delegate.inject(config.name, localParams, true);\r\n                }\r\n\r\n                $delegate.filesLoader(config, localParams).then(function () {\r\n                    $delegate.inject(null, localParams).then(function (res) {\r\n                        deferred.resolve(res);\r\n                    }, function (err) {\r\n                        deferred.reject(err);\r\n                    });\r\n                }, function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            // return the patched service\r\n            return $delegate;\r\n        }]);\r\n    }]);\r\n})(angular);\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\r\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", function ($delegate, $q) {\r\n            /**\r\n             * cssLoader function\r\n             * @type Function\r\n             * @param paths array list of css files to load\r\n             * @param callback to call when everything is loaded. We use a callback and not a promise\r\n             * @param params object config parameters\r\n             * because the user can overwrite cssLoader and it will probably not use promises :(\r\n             */\r\n            $delegate.cssLoader = function (paths, callback, params) {\r\n                var promises = [];\r\n                angular.forEach(paths, function (path) {\r\n                    promises.push($delegate.buildElement('css', path, params));\r\n                });\r\n                $q.all(promises).then(function () {\r\n                    callback();\r\n                }, function (err) {\r\n                    callback(err);\r\n                });\r\n            };\r\n            $delegate.cssLoader.ocLazyLoadLoader = true;\r\n\r\n            return $delegate;\r\n        }]);\r\n    }]);\r\n})(angular);\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\r\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", function ($delegate, $q) {\r\n            /**\r\n             * jsLoader function\r\n             * @type Function\r\n             * @param paths array list of js files to load\r\n             * @param callback to call when everything is loaded. We use a callback and not a promise\r\n             * @param params object config parameters\r\n             * because the user can overwrite jsLoader and it will probably not use promises :(\r\n             */\r\n            $delegate.jsLoader = function (paths, callback, params) {\r\n                var promises = [];\r\n                angular.forEach(paths, function (path) {\r\n                    promises.push($delegate.buildElement('js', path, params));\r\n                });\r\n                $q.all(promises).then(function () {\r\n                    callback();\r\n                }, function (err) {\r\n                    callback(err);\r\n                });\r\n            };\r\n            $delegate.jsLoader.ocLazyLoadLoader = true;\r\n\r\n            return $delegate;\r\n        }]);\r\n    }]);\r\n})(angular);\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\r\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$templateCache\", \"$q\", \"$http\", function ($delegate, $templateCache, $q, $http) {\r\n            /**\r\n             * templatesLoader function\r\n             * @type Function\r\n             * @param paths array list of css files to load\r\n             * @param callback to call when everything is loaded. We use a callback and not a promise\r\n             * @param params object config parameters for $http\r\n             * because the user can overwrite templatesLoader and it will probably not use promises :(\r\n             */\r\n            $delegate.templatesLoader = function (paths, callback, params) {\r\n                var promises = [],\r\n                    filesCache = $delegate._getFilesCache();\r\n\r\n                angular.forEach(paths, function (url) {\r\n                    var deferred = $q.defer();\r\n                    promises.push(deferred.promise);\r\n                    $http.get(url, params).success(function (data) {\r\n                        if (angular.isString(data) && data.length > 0) {\r\n                            angular.forEach(angular.element(data), function (node) {\r\n                                if (node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {\r\n                                    $templateCache.put(node.id, node.innerHTML);\r\n                                }\r\n                            });\r\n                        }\r\n                        if (angular.isUndefined(filesCache.get(url))) {\r\n                            filesCache.put(url, true);\r\n                        }\r\n                        deferred.resolve();\r\n                    }).error(function (err) {\r\n                        deferred.reject(new Error('Unable to load template file \"' + url + '\": ' + err));\r\n                    });\r\n                });\r\n                return $q.all(promises).then(function () {\r\n                    callback();\r\n                }, function (err) {\r\n                    callback(err);\r\n                });\r\n            };\r\n            $delegate.templatesLoader.ocLazyLoadLoader = true;\r\n\r\n            return $delegate;\r\n        }]);\r\n    }]);\r\n})(angular);\r\n// Array.indexOf polyfill for IE8\r\nif (!Array.prototype.indexOf) {\r\n    Array.prototype.indexOf = function (searchElement, fromIndex) {\r\n        var k;\r\n\r\n        // 1. Let O be the result of calling ToObject passing\r\n        //    the this value as the argument.\r\n        if (this == null) {\r\n            throw new TypeError('\"this\" is null or not defined');\r\n        }\r\n\r\n        var O = Object(this);\r\n\r\n        // 2. Let lenValue be the result of calling the Get\r\n        //    internal method of O with the argument \"length\".\r\n        // 3. Let len be ToUint32(lenValue).\r\n        var len = O.length >>> 0;\r\n\r\n        // 4. If len is 0, return -1.\r\n        if (len === 0) {\r\n            return -1;\r\n        }\r\n\r\n        // 5. If argument fromIndex was passed let n be\r\n        //    ToInteger(fromIndex); else let n be 0.\r\n        var n = +fromIndex || 0;\r\n\r\n        if (Math.abs(n) === Infinity) {\r\n            n = 0;\r\n        }\r\n\r\n        // 6. If n >= len, return -1.\r\n        if (n >= len) {\r\n            return -1;\r\n        }\r\n\r\n        // 7. If n >= 0, then Let k be n.\r\n        // 8. Else, n<0, Let k be len - abs(n).\r\n        //    If k is less than 0, then let k be 0.\r\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\r\n\r\n        // 9. Repeat, while k < len\r\n        while (k < len) {\r\n            // a. Let Pk be ToString(k).\r\n            //   This is implicit for LHS operands of the in operator\r\n            // b. Let kPresent be the result of calling the\r\n            //    HasProperty internal method of O with argument Pk.\r\n            //   This step can be combined with c\r\n            // c. If kPresent is true, then\r\n            //    i.  Let elementK be the result of calling the Get\r\n            //        internal method of O with the argument ToString(k).\r\n            //   ii.  Let same be the result of applying the\r\n            //        Strict Equality Comparison Algorithm to\r\n            //        searchElement and elementK.\r\n            //  iii.  If same is true, return k.\r\n            if (k in O && O[k] === searchElement) {\r\n                return k;\r\n            }\r\n            k++;\r\n        }\r\n        return -1;\r\n    };\r\n}"]}